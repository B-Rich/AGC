Block I Apollo Guidance Computer (AGC4) assembler version 1.6

First pass: generate symbol table.
Second pass: generate object code.

                          ; EXEC demonstration (file:execdemo.asm)
                          ; 
                          ; Version:	1.0
                          ; Author:	John Pultorak
                          ; Date:		11/11/2001
                          ; 
                          ; PURPOSE:
                          ; AGC EXEC demonstration program.
                          ; 
                          ; OPERATION:
                          ; TBD.
                          ; 
                          ; ERRATA:
                          ; - Written for the AGC4R assembler. The assembler directives and syntax
                          ; differ somewhat from the original AGC assembler.
                          ; 
                          ; SOURCES:
                          ; Information on the Block 1 architecture: instruction set, instruction
                          ; sequences, registers, register transfers, control pulses, memory and 
                          ; memory addressing, I/O assignments, interrupts, and involuntary counters
                          ; was obtained from:
                          ; 
                          ;	A. Hopkins, R. Alonso, and H. Blair-Smith, "Logical Description 
                          ;		for the Apollo Guidance Computer (AGC4)", R-393, 
                          ;		MIT Instrumentation Laboratory, Cambridge, MA, Mar. 1963.
                          ; 
                          ; Supplementary information was obtained from:
                          ; 
                          ;	R. Alonso, J. H. Laning, Jr. and H. Blair-Smith, "Preliminary 
                          ;		MOD 3C Programmer's Manual", E-1077, MIT Instrumentation 
                          ;		Laboratory, Cambridge, MA, Nov. 1961.
                          ; 
                          ;	B. I. Savage and A. Drake, "AGC4 Basic Training Manual, Volume I", 
                          ;		E-2052, MIT Instrumentation Laboratory, Cambridge, 
                          ;		MA, Jan. 1967.
                          ; 
                          ;	E. C. Hall, "MIT's Role in Project Apollo, Volume III, Computer 
                          ;		Subsystem", R-700, MIT Charles Stark Draper Laboratory, 
                          ;		Cambridge, MA, Aug. 1972.
                          ; 
                          ;	A. Hopkins, "Guidance Computer Design, Part VI", source unknown.
                          ; 
                          ;	A. I. Green and J. J. Rocchio, "Keyboard and Display System Program 
                          ;		for AGC (Program Sunrise)", E-1574, MIT Instrumentation 
                          ;		Laboratory, Cambridge, MA, Aug. 1964.
                          ; 
                          ;	E, C. Hall, "Journey to the Moon: The History of the Apollo 
                          ;		Guidance Computer", AIAA, Reston VA, 1996.
                          ; 
                          
                          ; ----------------------------------------------
                          
                                         ORG      EXTENDER       
05777    5777     47777 0                DS       %47777         ; needed for EXTEND
                          
                          ; ==============================================
                          ; ERASEABLE MEMORY:
                          
                                         ORG      BANK0          ; immediately following counters
                          
                          ; ==============================================
                          ; EXEC data area
                          ; ==============================================
                          ; 
                          MAXJOBS        EQU      7              ; max number of jobs
                          
                          ; job record structure
                          ; job priority: 0=no job, 1=lowest priority job, 2=...
                          
                          JOBPRIO        EQU      0              ; offset to job priority
                          JOBADDR        EQU      1              ; offset to job address
                          
                          JRECSZ         EQU      2              ; size of job record (words)
                          
                          ; Array of all job records
                          
                          EX_jobList     EQU      *              
00057    0057     00000 1                DS       0              ; record 0
00060    0060     00000 1                DS       0              
                          
00061    0061     00000 1                DS       0              ; record 1
00062    0062     00000 1                DS       0              
                          
00063    0063     00000 1                DS       0              ; record 2
00064    0064     00000 1                DS       0              
                          
00065    0065     00000 1                DS       0              ; record 3
00066    0066     00000 1                DS       0              
                          
00067    0067     00000 1                DS       0              ; record 4
00070    0070     00000 1                DS       0              
                          
00071    0071     00000 1                DS       0              ; record 5
00072    0072     00000 1                DS       0              
                          
00073    0073     00000 1                DS       0              ; record 6
00074    0074     00000 1                DS       0              
                          
00075    0075     00057 0 EX_curJobPtr   DS       EX_jobList     ; pointer to currently running job
                          
                          
                          CHGJOB         EQU      1              ; change jobs at next opportunity
                          KEEPJOB        EQU      0              ; keep the same job
00076    0076     00000 1 newJob         DS       0              ; change flag (set to CHGJOB or KEEPJOB)
                          
00077    0077     00000 1 EX_AJ_saveQ    DS       0              ; return address
00100    0100     00000 1 EX_AJ_loopCnt  DS       0              ; loop counter
00101    0101     00000 1 EX_AJ_jobPrio  DS       0              ; priority of new job
00102    0102     00000 1 EX_AJ_jobPtr   DS       0              ; initialized to EX_jobList at startup
                          
00103    0103     00000 1 EX_SJ_saveQ    DS       0              ; return address
00104    0104     00000 1 EX_SJ_loopCnt  DS       0              ; loop counter
00105    0105     00000 1 EX_SJ_jobPtr   DS       0              ; points to job rec in list
                          
00106    0106     00000 1 EX_IN_saveQ    DS       0              ; return address
00107    0107     00000 1 EX_IN_loopCnt  DS       0              ; loop counter
00110    0110     00000 1 EX_IN_jobPtr   DS       0              ; points to job rec in list
                          
00111    0111     00000 1 EX_BP_saveQ    DS       0              ; return address
00112    0112     00000 1 EX_BP_jobPtr   DS       0              ; points to job rec in list
                          
00113    0113     00000 1 EX_MN_runAddr  DS       0              ; address of job to run
                          
                          ; ==============================================
                          ; FIXED MEMORY:
                          
                          ; ----------------------------------------------
                          ; EXECUTION ENTRY POINTS
                          ; ----------------------------------------------
                          
                          ; program (re)start
                                         ORG      GOPROG         
02000    2000 0  1,2035 0                TC       goMAIN         ; AGC (re)start begins here!
                          
                          ; interrupt service entry points (H/W interrupt vectors)
                                         ORG      T3RUPT         
02004    2004 5  0,0026 0                TS       ARUPT          ; TIME3 interrupt entry point
02005    2005 3  0,0001 0                XCH      Q              
02006    2006 5  0,0027 1                TS       QRUPT          
02007    2007 0  1,2351 1                TC       goT3           
                          
                                         ORG      ERRUPT         
02010    2010 5  0,0026 0                TS       ARUPT          
02011    2011 3  0,0001 0                XCH      Q              
02012    2012 5  0,0027 1                TS       QRUPT          
02013    2013 0  1,2352 1                TC       goER           
                          
                                         ORG      DSRUPT         
02014    2014 5  0,0026 0                TS       ARUPT          ; DSKY keyboard interrupt entry point
02015    2015 3  0,0001 0                XCH      Q              
02016    2016 5  0,0027 1                TS       QRUPT          
02017    2017 0  1,2353 0                TC       goDS           
                          
                                         ORG      KEYRUPT        
02020    2020 5  0,0026 0                TS       ARUPT          
02021    2021 3  0,0001 0                XCH      Q              
02022    2022 5  0,0027 1                TS       QRUPT          
02023    2023 0  1,2354 1                TC       goKEY          
                          
                          
                                         ORG      UPRUPT         
02024    2024 5  0,0026 0                TS       ARUPT          
02025    2025 3  0,0001 0                XCH      Q              
02026    2026 5  0,0027 1                TS       QRUPT          
02027    2027 0  1,2355 0                TC       goUP           
                          
                          ; ----------------------------------------------
                          ; FIXED MEMORY CONSTANTS (shared)
                          ; ----------------------------------------------
                          
02030    2030     00200 0 ofbit          DS       %200           ; OUT1, bit 8 initiates standby
02031    2031     00000 1 zero           DS       0              
02032    2032     00001 0 one            DS       1              
02033    2033     06000 1 bankAddr       DS       %6000          ; fixed-switchable addr range starts here
02034    2034     01777 1 lowAddr        DS       %1777          ; mask for 10-bit address
                          
                          ; ----------------------------------------------
                          ; MAIN PROGRAM
                          ; ----------------------------------------------
                          
                          goMAIN         EQU      *              
02035    2035 2  0,0000 0                INHINT                  ; inhibit interrupts
                          
                          ; first, check for standby operation.
02036    2036 3  1,2030 0                XCH      ofbit          
02037    2037 5  0,0011 1                TS       OUT1           
                          
                          ; Initialize all EXEC eraseable memory variables
                          ; in case this is a restart.
                          
02040    2040 0  1,2315 1                TCR      EX_initEX      
                          
                          ; add some test jobs to the jobList.
02041    2041 3  1,2362 1                XCH      prio1          ; job priority
02042    2042 0  1,2147 1                TC       EX_addJob      
02043    2043     22000 1                DS       job1           ; 14 bit job address
                          
02044    2044 3  1,2363 0                XCH      prio2          ; job priority
02045    2045 0  1,2147 1                TC       EX_addJob      
02046    2046     24000 1                DS       job2           ; 14 bit job address
                          
02047    2047 3  1,2364 1                XCH      prio3          ; job priority
02050    2050 0  1,2147 1                TC       EX_addJob      
02051    2051     02365 0                DS       job3           ; 14 bit job address
                          
                          ; start the EXEC.
02052    2052 0  1,2061 1                TC       EX_exec        ; never returns
                          
                          ; ==============================================
                          ; EXEC constants
                          ; ----------------------------------------------
                          
02053    2053     00002 0 EX_jobRecSize  DS       JRECSZ         ; size of a job record (words)
02054    2054     00057 0 EX_jobLstStart DS       EX_jobList     ; starting address for jobList
02055    2055     00075 0 EX_jobLstEnd   DS       MAXJOBS@JRECSZ+EX_jobList 
02056    2056     00006 1 EX_numJobs     DS       MAXJOBS-1      ; init loop counter for all jobs
                          
                          ; enumerated types for setting change flag:
02057    2057     00001 0 EX_changeJob   DS       CHGJOB         ; change job
02060    2060     00000 1 EX_keepJob     DS       KEEPJOB        ; keep job
                          
                          ; ----------------------------------------------
                          ; EX_exec -- EXEC
                          ; 
                          ; Non-preemptive multitasking routines, originally implemented by J. H. 
                          ; Laning, Jr. for AGC3 and later adapted for AGC4. Briefly discussed in
                          ; R-393, which gives some of the software interfaces into the 
                          ; multitasking. This is my own recreation, and it only includes the job 
                          ; scheduling. The original EXEC also includes memory management for the 
                          ; eraseable memory; this is not reproduced here.
                          ; 
                          ; Overview: scheduled elements are called 'jobs'. Up to 7 jobs can be 
                          ; concurrently scheduled. An 8th 'dummy' job is always scheduled. Each 
                          ; job has an assigned priority (1-n, where 1 is the lowest priority). 
                          ; The highest priority job always executes. When that job terminates, 
                          ; the next highest priority job is selected for execution. If several 
                          ; jobs have the same priority, they are executed round-robin.
                          ; 
                          ; A job is scheduled for execution by calling 'EX_addJob' and 
                          ; furnishing the job priority and starting address.
                          ;	L	XCH	JOB_PRIORITY 
                          ;	L+1	TC	EX_addJob 
                          ;	L+2	DS	JOB_ADDRESS 
                          ;	L+3	... execution resumes here
                          ; 
                          ; JOB_PRIORITY = a positive integer from 1 - n where a higher number 
                          ;    indicates higher priority.
                          ; JOB_ADDRESS = starting address of the job.
                          ; 
                          ; 
                          ; Jobs terminate themselves by jumping to ENDOFJOB. This removes them 
                          ; from the scheduler:
                          ;	TC	ENDOFJOB 
                          ; 
                          ; Jobs can suspend themselves (yield to a higher priority job) by 
                          ; executing the following sequence:
                          ;	CCS	newJob 
                          ;	TC	CHANG1 
                          ; If there is no other job of equal or higher priority, the branch is 
                          ; not taken.
                          ; ----------------------------------------------
                          
                          
                          ; Add a dummy job (lowest priority) that never terminates.
                          
                          EX_exec        EQU      *              ; entry point
02061    2061 3  1,2345 1                XCH      dumPrio        ; job priority
02062    2062 0  1,2147 1                TC       EX_addJob      
02063    2063     02346 1                DS       dumJob         ; 14 bit job address
02064    2064 2  0,0000 0                INHINT                  ; inhibit RUPTs enab by addJob
                          
                          ; Find the highest priority job. Return with the job record address 
                          ; in 'jobCur'
                          
                          EX_MN_findJob  EQU      *              
02065    2065 0  1,2222 1                TCR      EX_selJob      
                          
                          ; check for NULL job (should not happen)
                          
02066    2066 1  0,0075 1                CCS      EX_curJobPtr   
02067    2067 0  1,2073 1                TC       EX_MN_runJob   ; >0, 14-bit address OK
02070    2070 0  1,2061 1                TC       EX_exec        ; +0
02071    2071 0  1,2061 1                TC       EX_exec        ; <0
02072    2072 0  1,2061 1                TC       EX_exec        ; -0
                          
                          ; Start the job. Interrupts are reenabled before 'EX_curJobPtr' is 
                          ; referenced, but the interrupts can only call 'EX_addJob' which does 
                          ; not change 'EX_curJobPtr'.
                          
                          ; The job address is always 14-bit, so check whether the address falls
                          ; within erasable or fixed-fixed memory. If so, use it as-is; otherwise,
                          ; set the bank register and change the address to 12-bit.
                          
                          EX_MN_runJob   EQU      *              
02073    2073 3  1,2031 1                CAF      zero           
02074    2074 2  0,0075 1                INDEX    EX_curJobPtr   
02075    2075 6  0,0001 0                AD       JOBADDR        
02076    2076 5  0,0113 1                TS       EX_MN_runAddr  ; save job's 14 bit address
                          
02077    2077 4  0,0000 0                COM                     
02100    2100 6  1,2033 0                AD       bankAddr       ; -(14bitAddr)+%6000
02101    2101 1  0,0000 0                CCS      A              ; job is bank addressed?
02102    2102 0  1,2113 0                TC       EX_MN_runIt    ; >0 no, just run it, as is
02103    2103 0  1,2105 1                TC       *+2            ; +0 yes
02104    2104 0  1,2105 1                TC       *+1            ; <0 yes
                          
02105    2105 3  1,2031 1                CAF      zero           
02106    2106 6  0,0113 1                AD       EX_MN_runAddr  
02107    2107 5  0,0015 0                TS       BANK           ; set the bank
                          
02110    2110 7  1,2034 0                MASK     lowAddr        ; get lowest 10-bits of address
02111    2111 6  1,2033 0                AD       bankAddr       ; set bits 11,12 for fixed-switchable
02112    2112 5  0,0113 1                TS       EX_MN_runAddr  
                          
                          EX_MN_runIt    EQU      *              
02113    2113 2  0,0000 1                RELINT                  ; enable interrupts
02114    2114 2  0,0113 0                INDEX    EX_MN_runAddr  ; apply indirect address to next instr.
02115    2115 0  0,0000 1                TC       0              ; run the job
                          
                          ; Job is terminated. Delete the job record.
                          
                          ENDOFJOB       EQU      *              
02116    2116 2  0,0000 0                INHINT                  ; inhibit interrupts
02117    2117 3  1,2031 1                CAF      zero           ; delete the job
02120    2120 2  0,0075 1                INDEX    EX_curJobPtr   
02121    2121 5  0,0000 1                TS       JOBPRIO        
                          
02122    2122 2  0,0075 1                INDEX    EX_curJobPtr   
02123    2123 5  0,0001 0                TS       JOBADDR        
                          
02124    2124 0  1,2065 0                TC       EX_MN_findJob  ; get next job
                          
                          ; Job is suspended. Keep the job record, but update the address, so 
                          ; execution will resume at the point after suspension.
                          
                          CHANG1         EQU      *              
02125    2125 2  0,0000 0                INHINT                  ; inhibit interrupts
02126    2126 3  0,0001 0                XCH      Q              
02127    2127 5  0,0113 1                TS       EX_MN_runAddr  ; save job's 14 bit restart address
                          
02130    2130 4  0,0000 0                COM                     
02131    2131 6  1,2033 0                AD       bankAddr       ; -(14bitAddr)+%6000
02132    2132 1  0,0000 0                CCS      A              ; job is bank addressed?
02133    2133 0  1,2142 1                TC       EX_MN_notBank  ; >0 no, just save it, as is
02134    2134 0  1,2136 1                TC       *+2            ; +0 yes
02135    2135 0  1,2136 1                TC       *+1            ; <0 yes
                          
02136    2136 4  1,2033 1                CS       bankAddr       ; 12bitAddr - %6000
02137    2137 6  0,0113 1                AD       EX_MN_runAddr  
02140    2140 6  0,0015 0                AD       BANK           ; make it a 14-bit address
02141    2141 0  1,2144 1                TC       EX_MN_saveIt   
                          
                          EX_MN_notBank  EQU      *              
02142    2142 3  1,2031 1                CAF      zero           
02143    2143 6  0,0113 1                AD       EX_MN_runAddr  ; get restart address
                          
                          EX_MN_saveIt   EQU      *              
02144    2144 2  0,0075 1                INDEX    EX_curJobPtr   
02145    2145 5  0,0001 0                TS       JOBADDR        ; save restart address in the job's record
02146    2146 0  1,2065 0                TC       EX_MN_findJob  ; get next job
                          
                          ; ----------------------------------------------
                          ; EX_addJob - ADD A JOB TO THE JOBLIST
                          ; 
                          ; Search jobList for an empty slot. If found, put the new job in the 
                          ; empty slot. If the new job has the same, or higher, priority than the 
                          ; current job, set the change flag to 'CHGJOB' (change jobs at the next 	; opportunity).
                          ; 
                          ; This is the only 'public' function. It can be called from a job 
                          ; or from an interrupt. It disables interrupts to maintain the 
                          ; integrity of the jobList.
                          ; ----------------------------------------------
                          
                          EX_addJob      EQU      *              
02147    2147 2  0,0000 0                INHINT                  ; disable interrupts
02150    2150 5  0,0101 1                TS       EX_AJ_jobPrio  ; save job priority
02151    2151 3  0,0001 0                XCH      Q              
02152    2152 5  0,0077 1                TS       EX_AJ_saveQ    ; save return address-1
                          
                          
                          ; Search jobList for an empty slot
                          
02153    2153 3  1,2056 0                CAF      EX_numJobs     ; number of slots to seach
                          EX_AJ_loop     EQU      *              
02154    2154 5  0,0100 0                TS       EX_AJ_loopCnt  
                          
                          ; Check for empty slot
                          
02155    2155 2  0,0102 0                INDEX    EX_AJ_jobPtr   ; get the priority
02156    2156 4  0,0000 0                CS       JOBPRIO        
02157    2157 6  1,2031 1                AD       zero           ; is slot empty?
02160    2160 1  0,0000 0                CCS      A              ; 
02161    2161 0  1,2175 0                TC       EX_AJ_bumpPtr  ; >0
02162    2162 0  1,2164 0                TC       *+2            ; +0 yes!
02163    2163 0  1,2175 0                TC       EX_AJ_bumpPtr  ; <0
                          
                          ; Found empty slot, so add new job there
                          
02164    2164 3  1,2031 1                CAF      zero           
02165    2165 6  0,0101 1                AD       EX_AJ_jobPrio  
02166    2166 2  0,0102 0                INDEX    EX_AJ_jobPtr   
02167    2167 5  0,0000 1                TS       JOBPRIO        ; store new job priority
                          
02170    2170 2  0,0077 0                INDEX    EX_AJ_saveQ    ; indirectly address addJobQ
02171    2171 3  0,0000 1                CAF      0              
02172    2172 2  0,0102 0                INDEX    EX_AJ_jobPtr   
02173    2173 5  0,0001 0                TS       JOBADDR        ; store new job address
                          
02174    2174 0  1,2204 0                TC       EX_AJ_testFlg  ; finished
                          
                          ; Bump job pointer to next job record
                          
                          EX_AJ_bumpPtr  EQU      *              
02175    2175 3  1,2031 1                CAF      zero           
02176    2176 6  0,0102 1                AD       EX_AJ_jobPtr   
02177    2177 0  1,2273 0                TCR      EX_bumpJobPtr  
02200    2200 5  0,0102 1                TS       EX_AJ_jobPtr   
                          
02201    2201 1  0,0100 1                CCS      EX_AJ_loopCnt  ; done searching jobList?
02202    2202 0  1,2154 0                TC       EX_AJ_loop     ; not yet
                          
                          ; Fell through loop, so search failed - all slots are full; probably 
                          ; should set some alarm
                          
02203    2203 0  1,2215 0                TC       EX_AJ_done     
                          
                          ; Set changeflag if priority of new job >= priority of current job
                          
                          EX_AJ_testFlg  EQU      *              
02204    2204 2  0,0075 1                INDEX    EX_curJobPtr   ; get priority of current job
02205    2205 4  0,0000 0                CS       JOBPRIO        ; make it a negative number
                          
02206    2206 6  0,0101 1                AD       EX_AJ_jobPrio  ; add positive priority of new job
02207    2207 1  0,0000 0                CCS      A              ; new job is highest priority?
02210    2210 0  1,2213 0                TC       *+3            ; >0, yes
02211    2211 0  1,2213 0                TC       *+2            ; +0, yes
02212    2212 0  1,2215 0                TC       EX_AJ_done     ; <0, no, current job is higher priority
                          
02213    2213 3  1,2057 1                CAF      EX_changeJob   ; set the change flag
02214    2214 5  0,0076 0                TS       newJob         
                          
                          EX_AJ_done     EQU      *              
02215    2215 3  0,0077 1                XCH      EX_AJ_saveQ    
02216    2216 6  1,2032 1                AD       one            
02217    2217 5  0,0001 0                TS       Q              
02220    2220 2  0,0000 1                RELINT                  ; enable interrupts
02221    2221 0  0,0000 0                RETURN                  
                          
                          ; ----------------------------------------------
                          ; EX_selJob - SELECT NEXT JOB
                          ; 
                          ; Select the next job for execution. Find the highest priority job by 
                          ; walking the jobList. If several jobs have the same priority, select 
                          ; the first job with the highest priority. Increment the current job 
                          ; pointer before searching, so jobs with the same priority are selected
                          ; in round-robin order. Upon return, 'EX_curJobPtr' holds the selected 
                          ; job.
                          ; ----------------------------------------------
                          
                          EX_selJob      EQU      *              
02222    2222 3  0,0001 0                XCH      Q              
02223    2223 5  0,0103 0                TS       EX_SJ_saveQ    ; save return address
                          
02224    2224 3  1,2031 1                CAF      zero           
02225    2225 6  0,0075 0                AD       EX_curJobPtr   
02226    2226 0  1,2273 0                TCR      EX_bumpJobPtr  ; bump pointer to next job
02227    2227 5  0,0075 0                TS       EX_curJobPtr   
                          
02230    2230 3  1,2031 1                CAF      zero           
02231    2231 6  0,0075 0                AD       EX_curJobPtr   
02232    2232 5  0,0105 0                TS       EX_SJ_jobPtr   ; make it our initial choice
                          
02233    2233 3  1,2060 0                CAF      EX_keepJob     ; clear change flag
02234    2234 5  0,0076 0                TS       newJob         
                          
                          ; Search jobList for any job with a higher priority than our
                          ; initial choice.
                          
02235    2235 3  1,2056 0                CAF      EX_numJobs     ; number of slots to seach
                          EX_SJ_loop     EQU      *              
02236    2236 5  0,0104 1                TS       EX_SJ_loopCnt  
                          
                          ; Compare job priority of this job against the current choice.
                          
02237    2237 2  0,0075 1                INDEX    EX_curJobPtr   ; get priority of current job
02240    2240 4  0,0000 0                CS       JOBPRIO        ; make it a negative number
02241    2241 2  0,0105 1                INDEX    EX_SJ_jobPtr   ; get highest prio (positive)
02242    2242 6  0,0000 1                AD       JOBPRIO        ; compare
02243    2243 1  0,0000 0                CCS      A              
02244    2244 0  1,2257 0                TC       EX_SJ_bumpPtr  ; >0
02245    2245 0  1,2247 1                TC       EX_SJ_setFlg   ; +0
02246    2246 0  1,2252 0                TC       EX_SJ_clrFlg   ; <0
                          
                          ; Priority of this job == highest priority job, so there are 
                          ; several jobs with the same priority
                          
                          EX_SJ_setFlg   EQU      *              
02247    2247 3  1,2057 1                CAF      EX_changeJob   ; set change flag
02250    2250 5  0,0076 0                TS       newJob         
02251    2251 0  1,2257 0                TC       EX_SJ_bumpPtr  
                          
                          ; Priority of this job > highest priority job, so make this job our
                          ; new choice.
                          
                          EX_SJ_clrFlg   EQU      *              
02252    2252 3  1,2060 0                CAF      EX_keepJob     ; clear change flag
02253    2253 5  0,0076 0                TS       newJob         
                          
02254    2254 3  1,2031 1                CAF      zero           
02255    2255 6  0,0075 0                AD       EX_curJobPtr   
02256    2256 5  0,0105 0                TS       EX_SJ_jobPtr   ; make it the new selection
                          
                          EX_SJ_bumpPtr  EQU      *              
02257    2257 3  1,2031 1                CAF      zero           
02260    2260 6  0,0075 0                AD       EX_curJobPtr   
02261    2261 0  1,2273 0                TCR      EX_bumpJobPtr  ; bump pointer to next job
02262    2262 5  0,0075 0                TS       EX_curJobPtr   
                          
02263    2263 1  0,0104 0                CCS      EX_SJ_loopCnt  ; done searching jobList?
02264    2264 0  1,2236 1                TC       EX_SJ_loop     ; not yet
                          
                          ; Found the highest priority job; make it the current job
                          
02265    2265 3  1,2031 1                CAF      zero           
02266    2266 6  0,0105 0                AD       EX_SJ_jobPtr   
02267    2267 5  0,0075 0                TS       EX_curJobPtr   
                          
02270    2270 3  0,0103 0                XCH      EX_SJ_saveQ    
02271    2271 5  0,0001 0                TS       Q              ; restore return address
02272    2272 0  0,0000 0                RETURN                  
                          
                          ; ----------------------------------------------
                          ; EX_bumpJobPtr - BUMP JOB RECORD POINTER
                          ; 
                          ; Bumps the job pointer in register 'A' to the next job record. Wrap 
                          ; the pointer back to the front of the list if necessary and return 
                          ; with the bumped pointer in 'A'.
                          ; ----------------------------------------------
                          
                          EX_bumpJobPtr  EQU      *              
02273    2273 5  0,0112 0                TS       EX_BP_jobPtr   ; save job pointer
02274    2274 3  0,0001 0                XCH      Q              
02275    2275 5  0,0111 0                TS       EX_BP_saveQ    ; save return address
                          
02276    2276 3  0,0112 0                XCH      EX_BP_jobPtr   ; bump the address by 1 job record
02277    2277 6  1,2053 0                AD       EX_jobRecSize  
02300    2300 5  0,0112 0                TS       EX_BP_jobPtr   
                          
02301    2301 4  0,0000 0                COM                     ; check for wraparound
02302    2302 6  1,2055 0                AD       EX_jobLstEnd   
02303    2303 1  0,0000 0                CCS      A              
02304    2304 0  1,2311 0                TC       EX_BP_done     ; >0
02305    2305 0  1,2307 1                TC       *+2            ; +0 yes, need to handle wrap
02306    2306 0  1,2311 0                TC       EX_BP_done     ; <0
                          
02307    2307 3  1,2054 1                CAF      EX_jobLstStart 
02310    2310 5  0,0112 0                TS       EX_BP_jobPtr   ; reset address to top of list
                          
                          EX_BP_done     EQU      *              
02311    2311 3  0,0111 0                XCH      EX_BP_saveQ    
02312    2312 5  0,0001 0                TS       Q              ; restore return address
02313    2313 3  0,0112 0                XCH      EX_BP_jobPtr   ; get return value
02314    2314 0  0,0000 0                RETURN                  
                          
                          ; ----------------------------------------------
                          ; EX_initEX - INITIALIZE EXEC
                          ; 
                          ; Initialize the eraseable memory segment for EXEC. Necessary in 
                          ; case the AGC is restarted.
                          ; ----------------------------------------------
                          
                          EX_initEX      EQU      *              
02315    2315 3  0,0001 0                XCH      Q              
02316    2316 5  0,0106 0                TS       EX_IN_saveQ    ; save return address
                          
02317    2317 3  1,2054 1                CAF      EX_jobLstStart ; initialize jobList pointers
02320    2320 5  0,0075 0                TS       EX_curJobPtr   
02321    2321 5  0,0102 1                TS       EX_AJ_jobPtr   
                          
02322    2322 3  1,2060 0                CAF      EX_keepJob     ; clear change flag
02323    2323 5  0,0076 0                TS       newJob         
                          
                          ; Iterate through jobList and zero all records
                          
02324    2324 3  1,2054 1                CAF      EX_jobLstStart ; init pointer to start of list
02325    2325 5  0,0110 1                TS       EX_IN_jobPtr   
02326    2326 3  1,2056 0                CAF      EX_numJobs     ; loop for number of jobs
                          EX_IN_loop     EQU      *              
02327    2327 5  0,0107 1                TS       EX_IN_loopCnt  
                          
02330    2330 3  1,2031 1                CAF      zero           
02331    2331 2  0,0110 0                INDEX    EX_IN_jobPtr   
02332    2332 5  0,0000 1                TS       JOBPRIO        
                          
02333    2333 2  0,0110 0                INDEX    EX_IN_jobPtr   
02334    2334 5  0,0001 0                TS       JOBADDR        
                          
02335    2335 3  0,0110 1                XCH      EX_IN_jobPtr   ; bump job pointer back 1 record
02336    2336 6  1,2053 0                AD       EX_jobRecSize  
02337    2337 5  0,0110 1                TS       EX_IN_jobPtr   
                          
02340    2340 1  0,0107 0                CCS      EX_IN_loopCnt  ; done clearing jobList?
02341    2341 0  1,2327 0                TC       EX_IN_loop     ; not yet
                          
02342    2342 3  0,0106 0                XCH      EX_IN_saveQ    
02343    2343 5  0,0001 0                TS       Q              ; restore return address
02344    2344 0  0,0000 0                RETURN                  
                          
                          ; ----------------------------------------------
                          ; DUMMY JOB - runs at the lowest priority and never terminates. Ensures 
                          ; that there is always at least one job executing.
                          ; ----------------------------------------------
                          
02345    2345     00001 0 dumPrio        DS       1              ; lowest priority
                          
                          dumJob         EQU      *              
02346    2346 1  0,0076 1                CCS      newJob         ; check for context switch
02347    2347 0  1,2125 0                TC       CHANG1         
02350    2350 0  1,2346 1                TC       dumJob         
                          
                          ; ----------------------------------------------
                          ; RUPT (INTERRUPT) SERVICE ROUTINES
                          ; ----------------------------------------------
                          
                          goT3           EQU      *              
02351    2351 0  1,2356 0                TC       endRUPT        
                          
                          goER           EQU      *              
02352    2352 0  1,2356 0                TC       endRUPT        
                          
                          goDS           EQU      *              
02353    2353 0  1,2356 0                TC       endRUPT        
                          
                          goKEY          EQU      *              
02354    2354 0  1,2356 0                TC       endRUPT        
                          
                          goUP           EQU      *              
02355    2355 0  1,2356 0                TC       endRUPT        
                          
                          endRUPT        EQU      *              
02356    2356 3  0,0027 1                XCH      QRUPT          ; restore Q
02357    2357 5  0,0001 0                TS       Q              
02360    2360 3  0,0026 0                XCH      ARUPT          ; restore A
02361    2361 2  0,0000 1                RESUME                  ; finished, go back
                          
                          ; ----------------------------------------------
                          ; ----------------------------------------------
                          
                          ; TEST JOBS
                          COUNT1         EQU      %44            
                          COUNT2         EQU      %45            
                          COUNT3         EQU      %46            
                          
02362    2362     00002 0 prio1          DS       2              
02363    2363     00002 0 prio2          DS       2              
02364    2364     00003 1 prio3          DS       3              
                          
                          ; TEST CODE - JOB 3
                          job3           EQU      *              
02365    2365 1  0,0076 1                CCS      newJob         ; yield to higher priority job
02366    2366 0  1,2125 0                TC       CHANG1         
                          
02367    2367 3  1,2031 1                CAF      zero           
02370    2370 6  0,0046 0                AD       COUNT3         
02371    2371 6  1,2032 1                AD       one            
02372    2372 5  0,0046 0                TS       COUNT3         
                          
02373    2373 0  1,2116 0                TC       ENDOFJOB       ; terminate job
                          
                          
                          
                                         ORG      BANK11         ; **** BANK 11 ****
                          
                          ; TEST CODE - JOB 1
                          job1           EQU      *              
22000 11,0000 3  1,2031 1                CAF      zero           
22001 11,0001 6  0,0044 1                AD       COUNT1         
22002 11,0002 6  1,2032 1                AD       one            
22003 11,0003 5  0,0044 1                TS       COUNT1         
                          
22004 11,0004 1  0,0076 1                CCS      newJob         ; yield to higher priority job
22005 11,0005 0  1,2125 0                TC       CHANG1         
                          
22006 11,0006 0 11,6000 1                TC       job1           
                          
                                         ORG      BANK12         ; **** BANK 12 ****
                          
                          ; TEST CODE - JOB 2
                          job2           EQU      *              
24000 12,0000 3  1,2031 1                CAF      zero           
24001 12,0001 6  0,0045 0                AD       COUNT2         
24002 12,0002 6  1,2032 1                AD       one            
24003 12,0003 5  0,0045 0                TS       COUNT2         
                          
24004 12,0004 1  0,0076 1                CCS      newJob         ; yield to higher priority job
24005 12,0005 0  1,2125 0                TC       CHANG1         
                          
24006 12,0006 0 12,6000 1                TC       job2           
                          
                          
                          
                          
                          
                          

Assembly complete. Errors = 0

Symbol table:
EXTENDER       005777   BANK0          000057   MAXJOBS        000007   
JOBPRIO        000000   JOBADDR        000001   JRECSZ         000002   
EX_jobList     000057   EX_curJobPtr   000075   CHGJOB         000001   
KEEPJOB        000000   newJob         000076   EX_AJ_saveQ    000077   
EX_AJ_loopCnt  000100   EX_AJ_jobPrio  000101   EX_AJ_jobPtr   000102   
EX_SJ_saveQ    000103   EX_SJ_loopCnt  000104   EX_SJ_jobPtr   000105   
EX_IN_saveQ    000106   EX_IN_loopCnt  000107   EX_IN_jobPtr   000110   
EX_BP_saveQ    000111   EX_BP_jobPtr   000112   EX_MN_runAddr  000113   
GOPROG         002000   T3RUPT         002004   ERRUPT         002010   
DSRUPT         002014   KEYRUPT        002020   UPRUPT         002024   
ofbit          002030   zero           002031   one            002032   
bankAddr       002033   lowAddr        002034   goMAIN         002035   
EX_jobRecSize  002053   EX_jobLstStart 002054   EX_jobLstEnd   002055   
EX_numJobs     002056   EX_changeJob   002057   EX_keepJob     002060   
EX_exec        002061   EX_MN_findJob  002065   EX_MN_runJob   002073   
EX_MN_runIt    002113   ENDOFJOB       002116   CHANG1         002125   
EX_MN_notBank  002142   EX_MN_saveIt   002144   EX_addJob      002147   
EX_AJ_loop     002154   EX_AJ_bumpPtr  002175   EX_AJ_testFlg  002204   
EX_AJ_done     002215   EX_selJob      002222   EX_SJ_loop     002236   
EX_SJ_setFlg   002247   EX_SJ_clrFlg   002252   EX_SJ_bumpPtr  002257   
EX_bumpJobPtr  002273   EX_BP_done     002311   EX_initEX      002315   
EX_IN_loop     002327   dumPrio        002345   dumJob         002346   
goT3           002351   goER           002352   goDS           002353   
goKEY          002354   goUP           002355   endRUPT        002356   
COUNT1         000044   COUNT2         000045   COUNT3         000046   
prio1          002362   prio2          002363   prio3          002364   
job3           002365   BANK11         022000   job1           022000   
BANK12         024000   job2           024000   ARUPT          000026   
Q              000001   QRUPT          000027   OUT1           000011   
A              000000   BANK           000015   