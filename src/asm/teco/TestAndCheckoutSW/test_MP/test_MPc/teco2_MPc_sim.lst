Block I Apollo Guidance Computer (AGC4) assembler version 1.6

First pass: generate symbol table.
Second pass: generate object code.

                          ; TECO2_MP (file:teco2_MP.asm)
                          ; 
                          ; Version:	1.0
                          ; Author:	John Pultorak
                          ; Date:		9/14/2001
                          ; 
                          ; PURPOSE:
                          ; Test and checkout program for the Block 1 Apollo Guidance Computer.
                          ; Tests extracode instructions: MP
                          ; 
                          ; OPERATION:
                          ; Enters an infinite loop at the end of the test. The A register contains 
                          ; the code for the test that failed, or the PASS code if all tests 
                          ; succeeded. See test codes below.
                          ; 
                          ; ERRATA:
                          ; - Written for the AGC4R assembler. The assembler directives and syntax
                          ; differ somewhat from the original AGC assembler.
                          ; - The tests attempt to check all threads, but are not exhaustive.
                          ; 
                          ; SOURCES:
                          ; Information on the Block 1 architecture: instruction set, instruction
                          ; sequences, registers, register transfers, control pulses, memory and 
                          ; memory addressing, I/O assignments, interrupts, and involuntary counters
                          ; was obtained from:
                          ; 
                          ;	A. Hopkins, R. Alonso, and H. Blair-Smith, "Logical Description 
                          ;		for the Apollo Guidance Computer (AGC4)", R-393, 
                          ;		MIT Instrumentation Laboratory, Cambridge, MA, Mar. 1963.
                          ; 
                          ; Supplementary information was obtained from:
                          ; 
                          ;	R. Alonso, J. H. Laning, Jr. and H. Blair-Smith, "Preliminary 
                          ;		MOD 3C Programmer's Manual", E-1077, MIT Instrumentation 
                          ;		Laboratory, Cambridge, MA, Nov. 1961.
                          ; 
                          ;	B. I. Savage and A. Drake, "AGC4 Basic Training Manual, Volume I", 
                          ;		E-2052, MIT Instrumentation Laboratory, Cambridge, 
                          ;		MA, Jan. 1967.
                          ; 
                          ;	E. C. Hall, "MIT's Role in Project Apollo, Volume III, Computer 
                          ;		Subsystem", R-700, MIT Charles Stark Draper Laboratory, 
                          ;		Cambridge, MA, Aug. 1972.
                          ; 
                          ;	A. Hopkins, "Guidance Computer Design, Part VI", source unknown.
                          ; 
                          ;	A. I. Green and J. J. Rocchio, "Keyboard and Display System Program 
                          ;		for AGC (Program Sunrise)", E-1574, MIT Instrumentation 
                          ;		Laboratory, Cambridge, MA, Aug. 1964.
                          ; 
                          ;	E, C. Hall, "Journey to the Moon: The History of the Apollo 
                          ;		Guidance Computer", AIAA, Reston VA, 1996.
                          ; 
                          
                          
                          START          EQU      %00            
                          
                          MPtst          EQU      %01            ; MP check failed
                          
                          PASS           EQU      %12345         ; PASSED all checks
                          ; ----------------------------------------------
                          
                                         ORG      EXTENDER       
05777    5777     47777 0                DS       %47777         ; needed for EXTEND
                          
                          OVFCNTR        EQU      %00034         ; overflow counter
                          
                          ; ----------------------------------------------
                          ; ERASEABLE MEMORY -- DATA SEGMENT
                          
                                         ORG      %100           ; start of data area
00100    0100     00000 1 curtest        DS       START          ; current test
00101    0101     00000 1 savQ           DS       %0             
                          
                          ; MP test
00102    0102     00000 1 MPindex        DS       %0             
00103    0103     00000 1 MPXTND         DS       %0             ; indexed extend
                          
                          ; ----------------------------------------------
                          ; ENTRY POINTS
                          
                          ; program (re)start
                                         ORG      GOPROG         
02000    2000 0  1,2001 1                TC       goMAIN         
                          
                          ; ----------------------------------------------
                          ; FIXED MEMORY -- SHARED DATA SEGMENT
                          
                          ; ----------------------------------------------
                          ; MAIN PROGRAM
                          
                          goMAIN         EQU      *              
02001    2001 2  0,0000 0                INHINT                  ; disable interrupts
                          
02002    2002 0  1,2011 0                TCR      begin          
                          
                          ; Test extracode instructions.
02003    2003 0  1,2014 0                TCR      chkMP          
                          
                          ; Passed all tests.
02004    2004 0  1,2055 0                TCR      finish         
                          
                          fail           EQU      *              
02005    2005 3  0,0100 0                XCH      curtest        ; load last passed test into A
02006    2006 5  0,0100 0                TS       curtest        
                          
                          end            EQU      *              
02007    2007 0  1,2007 1                TC       end            ; finished, TC trap
                          
                          ; ----------------------------------------------
                          ; INITIALIZE FOR START OF TESTING
                          
02010    2010     00000 1 STRTcode       DS       START          
                          
                          begin          EQU      *              
02011    2011 3  1,2010 1                XCH      STRTcode       
02012    2012 5  0,0100 0                TS       curtest        ; set current test code to START
02013    2013 0  0,0000 0                RETURN                  
                          
                          ; ----------------------------------------------
                          ; TEST MP INSTRUCTION SUBROUTINE
                          ; L:	MP	K
                          ; Verifies the following
                          ; - Set C(A,LP) = b(A) * C(K)
                          ; - Take next instruction from L+1
                          
                          chkMP          EQU      *              
02014    2014 3  0,0001 0                XCH      Q              
02015    2015 5  0,0101 1                TS       savQ           ; save return address
                          
02016    2016 3  1,2060 0                CAF      MPcode         
02017    2017 5  0,0100 0                TS       curtest        ; set current test code to this test
                          
                          ; Decrementing loop
                          ;	- always executes at least once (tests at end of loop)		
                          ;	- loops 'MPstart+1' times; decrements MPindex
02020    2020 3  1,2061 1                XCH      MPstart        ; initialize loop counter
                          
                          ;------------------------------ 
                          ; MP check starts here
                          ; uses MPindex to access test values
                          MPloop         EQU      *              
02021    2021 5  0,0102 1                TS       MPindex        ; save new index
                          
02022    2022 3  2,5777 0                CAF      EXTENDER       
02023    2023 6  0,0102 1                AD       MPindex        
02024    2024 5  0,0103 0                TS       MPXTND         
                          
02025    2025 2  0,0102 0                INDEX    MPindex        
02026    2026 3  1,2062 1                CAF      mp1            
02027    2027 2  0,0103 1                INDEX    MPXTND         ; EXTEND using MPindex
02030    2030 4  1,2074 1                MP       mp2            
                          
                          ; verify C(A)
02031    2031 4  0,0000 0                COM                     ; get -A
02032    2032 2  0,0102 0                INDEX    MPindex        
02033    2033 6  1,2106 1                AD       MPchkA         ; put (-A) + expected value in A
02034    2034 1  0,0000 0                CCS      A              ; compare
02035    2035 0  1,2005 0                TC       fail           ; >0 (A < expected value)
02036    2036 0  1,2005 0                TC       fail           ; +0
02037    2037 0  1,2005 0                TC       fail           ; <0 (A > expected value)
                          
                          ; verify C(LP)
02040    2040 4  0,0003 0                CS       LP             ; get -A
02041    2041 2  0,0102 0                INDEX    MPindex        
02042    2042 6  1,2120 0                AD       MPchkLP        ; put (-A) + expected value in A
02043    2043 1  0,0000 0                CCS      A              ; compare
02044    2044 0  1,2005 0                TC       fail           ; >0 (A < expected value)
02045    2045 0  1,2005 0                TC       fail           ; +0
02046    2046 0  1,2005 0                TC       fail           ; <0 (A > expected value)
                          
                          ; end of MP check
                          ;------------------------------ 
                          
02047    2047 1  0,0102 0                CCS      MPindex        ; done?
02050    2050 0  1,2021 0                TC       MPloop         ; not yet, do next check
                          
02051    2051 3  0,0101 1                XCH      savQ           
02052    2052 5  0,0001 0                TS       Q              ; restore return address
02053    2053 0  0,0000 0                RETURN                  
                          
                          ; ----------------------------------------------
                          ; PASSED ALL TESTS!
                          
02054    2054     12345 0 PASScode       DS       PASS           
                          
                          finish         EQU      *              
02055    2055 3  1,2054 1                CAF      PASScode       
02056    2056 5  0,0100 0                TS       curtest        ; set current test code to PASS
02057    2057 0  0,0000 0                RETURN                  
                          
                          ; ----------------------------------------------
                          
02060    2060     00001 0 MPcode         DS       MPtst          ; code for this test
                          
                          ; MP test values
                          ;                          
02061    2061     00011 1 MPstart        DS       9              ; loop MPstart+1 times
                          
                          ; C(A) test values
                          mp1            EQU      *              
                          ; randomly selected checks (two word product)
02062    2062     00375 0                DS       %00375         ; check #18 (253 * 197)
02063    2063     00305 1                DS       %00305         ; check #19 (197 * 253)
02064    2064     02455 1                DS       %02455         ; check #22 (1325 * 1067)
02065    2065     02053 0                DS       %02053         ; check #23 (1067 * 1325)
02066    2066     20032 1                DS       %20032         ; check #26 (8218 * 7733)
02067    2067     17065 1                DS       %17065         ; check #27 (7733 * 8218)
02070    2070     30273 1                DS       %30273         ; check #28 (12475 * 11501)
02071    2071     26355 0                DS       %26355         ; check #29 (11501 * 12475)
02072    2072     37553 0                DS       %37553         ; check #30 (16235 * 15372)
02073    2073     36014 1                DS       %36014         ; check #31 (15372 * 16235)
                          
                          ; C(K) test values
                          mp2            EQU      *              
                          ; randomly selected checks (two word product)
02074    2074     00305 1                DS       %00305         ; check #18 (253 * 197)
02075    2075     00375 0                DS       %00375         ; check #19 (197 * 253)
02076    2076     02053 0                DS       %02053         ; check #22 (1325 * 1067)
02077    2077     02455 1                DS       %02455         ; check #23 (1067 * 1325)
02100    2100     17065 1                DS       %17065         ; check #26 (8218 * 7733)
02101    2101     20032 1                DS       %20032         ; check #27 (7733 * 8218)
02102    2102     26355 0                DS       %26355         ; check #28 (12475 * 11501)
02103    2103     30273 1                DS       %30273         ; check #29 (11501 * 12475)
02104    2104     36014 1                DS       %36014         ; check #30 (16235 * 15372)
02105    2105     37553 0                DS       %37553         ; check #31 (15372 * 16235)
                          
                          ; A = upper product
                          MPchkA         EQU      *              
                          ; randomly selected checks (two word product)
02106    2106     00003 1                DS       %00003         ; check #18 (253 * 197)
02107    2107     00003 1                DS       %00003         ; check #19 (197 * 253)
02110    2110     00126 1                DS       %00126         ; check #22 (1325 * 1067)
02111    2111     00126 1                DS       %00126         ; check #23 (1067 * 1325)
02112    2112     07446 0                DS       %07446         ; check #26 (8218 * 7733)
02113    2113     07446 0                DS       %07446         ; check #27 (7733 * 8218)
02114    2114     21065 1                DS       %21065         ; check #28 (12475 * 11501)
02115    2115     21065 1                DS       %21065         ; check #29 (11501 * 12475)
02116    2116     35600 1                DS       %35600         ; check #30 (16235 * 15372)
02117    2117     35600 1                DS       %35600         ; check #31 (15372 * 16235)
                          
                          ; LP = lower product
                          MPchkLP        EQU      *              
                          ; randomly selected checks (two word product)
02120    2120     01261 0                DS       %01261         ; check #18 (253 * 197)
02121    2121     01261 0                DS       %01261         ; check #19 (197 * 253)
02122    2122     11217 0                DS       %11217         ; check #22 (1325 * 1067)
02123    2123     11217 0                DS       %11217         ; check #23 (1067 * 1325)
02124    2124     30542 1                DS       %30542         ; check #26 (8218 * 7733)
02125    2125     30542 1                DS       %30542         ; check #27 (7733 * 8218)
02126    2126     00437 1                DS       %00437         ; check #28 (12475 * 11501)
02127    2127     00437 1                DS       %00437         ; check #29 (11501 * 12475)
02130    2130     06404 1                DS       %06404         ; check #30 (16235 * 15372)
02131    2131     06404 1                DS       %06404         ; check #31 (15372 * 16235)
                          
                          
                          

Assembly complete. Errors = 0

Symbol table:
START          000000   MPtst          000001   PASS           012345   
EXTENDER       005777   OVFCNTR        000034   curtest        000100   
savQ           000101   MPindex        000102   MPXTND         000103   
GOPROG         002000   goMAIN         002001   fail           002005   
end            002007   STRTcode       002010   begin          002011   
chkMP          002014   MPloop         002021   PASScode       002054   
finish         002055   MPcode         002060   MPstart        002061   
mp1            002062   mp2            002074   MPchkA         002106   
MPchkLP        002120   Q              000001   A              000000   
LP             000003   