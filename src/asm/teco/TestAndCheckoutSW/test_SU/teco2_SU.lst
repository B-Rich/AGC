Block I Apollo Guidance Computer (AGC4) assembler version 1.6

First pass: generate symbol table.
Second pass: generate object code.

                          ; TECO2_SU (file:teco2_SU.asm)
                          ; 
                          ; Version:	1.0
                          ; Author:	John Pultorak
                          ; Date:		9/14/2001
                          ; 
                          ; PURPOSE:
                          ; Test and checkout program for the Block 1 Apollo Guidance Computer.
                          ; Tests extracode instructions: SU
                          ; 
                          ; OPERATION:
                          ; Enters an infinite loop at the end of the test. The A register contains 
                          ; the code for the test that failed, or the PASS code if all tests 
                          ; succeeded. See test codes below.
                          ; 
                          ; ERRATA:
                          ; - Written for the AGC4R assembler. The assembler directives and syntax
                          ; differ somewhat from the original AGC assembler.
                          ; - The tests attempt to check all threads, but are not exhaustive.
                          ; 
                          ; SOURCES:
                          ; Information on the Block 1 architecture: instruction set, instruction
                          ; sequences, registers, register transfers, control pulses, memory and 
                          ; memory addressing, I/O assignments, interrupts, and involuntary counters
                          ; was obtained from:
                          ; 
                          ;	A. Hopkins, R. Alonso, and H. Blair-Smith, "Logical Description 
                          ;		for the Apollo Guidance Computer (AGC4)", R-393, 
                          ;		MIT Instrumentation Laboratory, Cambridge, MA, Mar. 1963.
                          ; 
                          ; Supplementary information was obtained from:
                          ; 
                          ;	R. Alonso, J. H. Laning, Jr. and H. Blair-Smith, "Preliminary 
                          ;		MOD 3C Programmer's Manual", E-1077, MIT Instrumentation 
                          ;		Laboratory, Cambridge, MA, Nov. 1961.
                          ; 
                          ;	B. I. Savage and A. Drake, "AGC4 Basic Training Manual, Volume I", 
                          ;		E-2052, MIT Instrumentation Laboratory, Cambridge, 
                          ;		MA, Jan. 1967.
                          ; 
                          ;	E. C. Hall, "MIT's Role in Project Apollo, Volume III, Computer 
                          ;		Subsystem", R-700, MIT Charles Stark Draper Laboratory, 
                          ;		Cambridge, MA, Aug. 1972.
                          ; 
                          ;	A. Hopkins, "Guidance Computer Design, Part VI", source unknown.
                          ; 
                          ;	A. I. Green and J. J. Rocchio, "Keyboard and Display System Program 
                          ;		for AGC (Program Sunrise)", E-1574, MIT Instrumentation 
                          ;		Laboratory, Cambridge, MA, Aug. 1964.
                          ; 
                          ;	E, C. Hall, "Journey to the Moon: The History of the Apollo 
                          ;		Guidance Computer", AIAA, Reston VA, 1996.
                          ; 
                          
                          
                          START          EQU      %00            
                          
                          MPtst          EQU      %01            ; MP check failed
                          DVtst          EQU      %02            ; DV check failed
                          SUtst          EQU      %03            ; SU check failed
                          
                          PASS           EQU      %12345         ; PASSED all checks
                          ; ----------------------------------------------
                          
                                         ORG      EXTENDER       
05777    5777     47777 0                DS       %47777         ; needed for EXTEND
                          
                          OVFCNTR        EQU      %00034         ; overflow counter
                          
                          ; ----------------------------------------------
                          ; ERASEABLE MEMORY -- DATA SEGMENT
                          
                                         ORG      %100           ; start of data area
00100    0100     00000 1 curtest        DS       START          ; current test
00101    0101     00000 1 savQ           DS       %0             
                          
                          ; SU test
00102    0102     77777 0 SUk            DS       -0             
                          
                          ; ----------------------------------------------
                          ; ENTRY POINTS
                          
                          ; program (re)start
                                         ORG      GOPROG         
02000    2000 0  1,2001 1                TC       goMAIN         
                          
                          ; ----------------------------------------------
                          ; FIXED MEMORY -- SHARED DATA SEGMENT
                          
                          ; ----------------------------------------------
                          ; MAIN PROGRAM
                          
                          goMAIN         EQU      *              
02001    2001 2  0,0000 0                INHINT                  ; disable interrupts
                          
02002    2002 0  1,2011 0                TCR      begin          
                          
                          ; Test extracode instructions.
02003    2003 0  1,2030 0                TCR      chkSU          
                          
                          ; Passed all tests.
02004    2004 0  1,2132 0                TCR      finish         
                          
                          fail           EQU      *              
02005    2005 3  0,0100 0                XCH      curtest        ; load last passed test into A
02006    2006 5  0,0100 0                TS       curtest        
                          
                          end            EQU      *              
02007    2007 0  1,2007 1                TC       end            ; finished, TC trap
                          
                          ; ----------------------------------------------
                          ; INITIALIZE FOR START OF TESTING
                          
02010    2010     00000 1 STRTcode       DS       START          
                          
                          begin          EQU      *              
02011    2011 3  1,2010 1                XCH      STRTcode       
02012    2012 5  0,0100 0                TS       curtest        ; set current test code to START
02013    2013 0  0,0000 0                RETURN                  
                          
                          ; ----------------------------------------------
                          ; TEST SU INSTRUCTION SUBROUTINE
                          ; L:	SU	K
                          ; Verifies the following:
                          ; - Set C(A) = b(A) - C(K)
                          ; - Take next instruction from L+1
                          ; - if C(A) has positive overflow,
                          ; -- increment overflow counter by 1
                          ; - if C(A) has negative overflow,
                          ; -- decrement overflow counter by 1
                          
02014    2014     00003 1 SUcode         DS       SUtst          ; code for this test
                          
02015    2015     00000 1 SUplus0        DS       +0             
02016    2016     00001 0 SUplus1        DS       1              
02017    2017     77776 1 SUmin1         DS       -1             
                          
02020    2020     25252 0 SU25252        DS       %25252         ; +10922 decimal
02021    2021     12525 0 SU12525        DS       %12525         ; +5461 decimal
02022    2022     37777 1 SU37777        DS       %37777         ; largest positive number
02023    2023     12524 1 SU12524        DS       %12524         ; positive overflow of %25252+%25252
                          
02024    2024     52525 1 SU52525        DS       %52525         ; -10922 decimal
02025    2025     65252 1 SU65252        DS       %65252         ; -5461 decimal
02026    2026     40000 0 SU40000        DS       %40000         ; largest negative number
02027    2027     65253 0 SU65253        DS       %65253         ; negative overflow of %52525+65252
                          
                          chkSU          EQU      *              
02030    2030 3  0,0001 0                XCH      Q              
02031    2031 5  0,0101 1                TS       savQ           ; save return address
                          
02032    2032 3  1,2014 0                CAF      SUcode         
02033    2033 5  0,0100 0                TS       curtest        ; set current test code to this test
                          
                          ; NOTE: these test are similar to the checks for AD, but
                          ; the AD augend value has been changed to negative and AD has
                          ; been changed to SU. The results produced by this change
                          ; are identical to AD, and so the checks are the same.
                          
                          ; TEST1: difference positive, no overflow
                          ; sub: %25252 - %65252 = %37777 (sign + 14 magnitude)
02034    2034 3  1,2020 1                CAF      SU25252        
02035    2035 2  0,0000 1                EXTEND                  
02036    2036 6  1,2025 1                SU       SU65252        
                          ; verify C(A) = %37777
02037    2037 4  0,0000 0                COM                     ; get -A
02040    2040 6  1,2022 0                AD       SU37777        ; put (-A) + expected value in A
02041    2041 1  0,0000 0                CCS      A              ; compare
02042    2042 0  1,2005 0                TC       fail           ; >0 (A < expected value)
02043    2043 0  1,2005 0                TC       fail           ; +0
02044    2044 0  1,2005 0                TC       fail           ; <0 (A > expected value)
                          
                          ; TEST2: difference negative, no overflow (sign + 14 magnitude)
                          ; sub: %52525 - %12525 = %40000
02045    2045 3  1,2024 0                CAF      SU52525        
02046    2046 2  0,0000 1                EXTEND                  
02047    2047 6  1,2021 0                SU       SU12525        
                          ; verify C(A) = %40000
02050    2050 4  0,0000 0                COM                     ; get -A
02051    2051 6  1,2026 1                AD       SU40000        ; put (-A) + expected value in A
02052    2052 1  0,0000 0                CCS      A              ; compare
02053    2053 0  1,2005 0                TC       fail           ; >0 (A < expected value)
02054    2054 0  1,2005 0                TC       fail           ; +0
02055    2055 0  1,2005 0                TC       fail           ; <0 (A > expected value)
                          
                          ; TEST3: difference positive, overflow
                          ; initialize overflow counter and positive overflow storage
02056    2056 3  1,2015 1                CAF      SUplus0        
02057    2057 5  0,0034 0                TS       OVFCNTR        
02060    2060 5  0,0102 1                TS       SUk            
                          ; sub: %25252 - %52525 = %52524 (sign + 14 magnitude)
02061    2061 3  1,2020 1                CAF      SU25252        
02062    2062 2  0,0000 1                EXTEND                  
02063    2063 6  1,2024 0                SU       SU52525        
02064    2064 5  0,0102 1                TS       SUk            ; store positive overflow
02065    2065 0  1,2005 0                TC       fail           
                          ; verify SUk = %12524
02066    2066 4  0,0102 0                CS       SUk            ; get -A
02067    2067 6  1,2023 1                AD       SU12524        ; put (-A) + expected value in A
02070    2070 1  0,0000 0                CCS      A              ; compare
02071    2071 0  1,2005 0                TC       fail           ; >0 (A < expected value)
02072    2072 0  1,2005 0                TC       fail           ; +0
02073    2073 0  1,2005 0                TC       fail           ; <0 (A > expected value)
                          ; verify overflow counter =%00001
02074    2074 4  0,0034 1                CS       OVFCNTR        ; get -A
02075    2075 6  1,2016 1                AD       SUplus1        ; put (-A) + expected value in A
02076    2076 1  0,0000 0                CCS      A              ; compare
02077    2077 0  1,2005 0                TC       fail           ; >0 (A < expected value)
02100    2100 0  1,2005 0                TC       fail           ; +0
02101    2101 0  1,2005 0                TC       fail           ; <0 (A > expected value)
                          
                          ; TEST4: difference negative, overflow
02102    2102 3  1,2015 1                CAF      SUplus0        
02103    2103 5  0,0034 0                TS       OVFCNTR        
02104    2104 5  0,0102 1                TS       SUk            
                          ; add: %52525 + %25252 = %25253 (sign + 14 magnitude)
02105    2105 3  1,2024 0                CAF      SU52525        
02106    2106 2  0,0000 1                EXTEND                  
02107    2107 6  1,2020 1                SU       SU25252        
02110    2110 5  0,0102 1                TS       SUk            ; store negative overflow
02111    2111 0  1,2005 0                TC       fail           
                          ; verify SUk = %65253
02112    2112 4  0,0102 0                CS       SUk            ; get -A
02113    2113 6  1,2027 0                AD       SU65253        ; put (-A) + expected value in A
02114    2114 1  0,0000 0                CCS      A              ; compare
02115    2115 0  1,2005 0                TC       fail           ; >0 (A < expected value)
02116    2116 0  1,2005 0                TC       fail           ; +0
02117    2117 0  1,2005 0                TC       fail           ; <0 (A > expected value)
                          ; verify overflow counter =%77776
02120    2120 4  0,0034 1                CS       OVFCNTR        ; get -A
02121    2121 6  1,2017 0                AD       SUmin1         ; put (-A) + expected value in A
02122    2122 1  0,0000 0                CCS      A              ; compare
02123    2123 0  1,2005 0                TC       fail           ; >0 (A < expected value)
02124    2124 0  1,2005 0                TC       fail           ; +0
02125    2125 0  1,2005 0                TC       fail           ; <0 (A > expected value)
                          
02126    2126 3  0,0101 1                XCH      savQ           
02127    2127 5  0,0001 0                TS       Q              ; restore return address
02130    2130 0  0,0000 0                RETURN                  
                          ; ----------------------------------------------
                          ; PASSED ALL TESTS!
                          
02131    2131     12345 0 PASScode       DS       PASS           
                          
                          finish         EQU      *              
02132    2132 3  1,2131 0                CAF      PASScode       
02133    2133 5  0,0100 0                TS       curtest        ; set current test code to PASS
02134    2134 0  0,0000 0                RETURN                  
                          
                          ; ----------------------------------------------
                          
                          

Assembly complete. Errors = 0

Symbol table:
START          000000   MPtst          000001   DVtst          000002   
SUtst          000003   PASS           012345   EXTENDER       005777   
OVFCNTR        000034   curtest        000100   savQ           000101   
SUk            000102   GOPROG         002000   goMAIN         002001   
fail           002005   end            002007   STRTcode       002010   
begin          002011   SUcode         002014   SUplus0        002015   
SUplus1        002016   SUmin1         002017   SU25252        002020   
SU12525        002021   SU37777        002022   SU12524        002023   
SU52525        002024   SU65252        002025   SU40000        002026   
SU65253        002027   chkSU          002030   PASScode       002131   
finish         002132   Q              000001   A              000000   
