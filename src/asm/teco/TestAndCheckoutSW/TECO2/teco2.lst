Block I Apollo Guidance Computer (AGC4) assembler version 1.6

First pass: generate symbol table.
Second pass: generate object code.

                          ; TECO2 (file:teco2.asm)
                          
                          ; PURPOSE:
                          ; Test and checkout program for the Block 1 Apollo Guidance Computer.
                          ; Tests extracode instructions: MP, DV, SU
                          ; 
                          ; OPERATION:
                          ; Enters an infinite loop at the end of the test. The A register contains 
                          ; the code for the test that failed, or the PASS code if all tests 
                          ; succeeded. See test codes below.
                          START          EQU      %00            
                          MPtst          EQU      %01            ; MP check failed
                          DVtst          EQU      %02            ; DV check failed
                          SUtst          EQU      %03            ; SU check failed
                          OVFCNTR        EQU      %00034         ; overflow counter
                          
                          PASS           EQU      %12345         ; PASSED all checks
                          
                          ; ----------------------------------------------
                                         ORG      EXTENDER       
05777    5777     47777 0                DS       %47777         ; needed for EXTEND
                          
                          ; ----------------------------------------------
                          ; ERASEABLE MEMORY -- DATA SEGMENT
                          ; ----------------------------------------------
                                         ORG      %100           ; start of data area
00100    0100     00000 1 curtest        DS       START          ; current test
00101    0101     00000 1 savQ           DS       %0             
00102    0102     00000 1 MPindex        DS       %0             ; MP test
00103    0103     00000 1 MPXTND         DS       %0             ; indexed extend
00104    0104     00000 1 DVsavA         DS       %0             ; DV test
00105    0105     00000 1 DVindex        DS       %0             
00106    0106     00000 1 DVXTND         DS       %0             ; indexed extend
00107    0107     77777 0 SUk            DS       -0             ; SU test
                          
                          ; ----------------------------------------------
                          ; ENTRY POINTS
                          ; ----------------------------------------------
                                         ORG      GOPROG         
02000    2000 0  1,2030 0                TC       goMAIN         
                          
                          ; interrupt service entry points
                                         ORG      T3RUPT         
02004    2004 5  0,0026 0                TS       ARUPT          
02005    2005 3  0,0001 0                XCH      Q              
02006    2006 5  0,0027 1                TS       QRUPT          
02007    2007 0  1,2742 1                TC       goT3           
                          
                                         ORG      ERRUPT         
02010    2010 5  0,0026 0                TS       ARUPT          
02011    2011 3  0,0001 0                XCH      Q              
02012    2012 5  0,0027 1                TS       QRUPT          
02013    2013 0  1,2742 1                TC       goER           
                          
                                         ORG      DSRUPT         
02014    2014 5  0,0026 0                TS       ARUPT          
02015    2015 3  0,0001 0                XCH      Q              
02016    2016 5  0,0027 1                TS       QRUPT          
02017    2017 0  1,2742 1                TC       goDS           
                          
                                         ORG      KEYRUPT        
02020    2020 5  0,0026 0                TS       ARUPT          
02021    2021 3  0,0001 0                XCH      Q              
02022    2022 5  0,0027 1                TS       QRUPT          
02023    2023 0  1,2742 1                TC       goKEY          
                          
                          
                                         ORG      UPRUPT         
02024    2024 5  0,0026 0                TS       ARUPT          
02025    2025 3  0,0001 0                XCH      Q              
02026    2026 5  0,0027 1                TS       QRUPT          
02027    2027 0  1,2742 1                TC       goUP           
                          
                          
                          ; ----------------------------------------------
                          ; FIXED MEMORY -- SHARED DATA SEGMENT
                          ; MAIN PROGRAM
                          
                          ; ----------------------------------------------
                          goMAIN         EQU      *              
02030    2030 2  0,0000 0                INHINT                  ; disable interrupts
02031    2031 0  1,2042 0                TCR      begin          
                          
                          ; Test extracode instructions.
02032    2032 0  1,2247 1                TCR      chkMP          
02033    2033 0  1,2551 1                TCR      chkDV          
02034    2034 0  1,2635 0                TCR      chkSU          
                          
                          ; Passed all tests.
02035    2035 0  1,2737 0                TCR      finish         
                          
                          fail           EQU      *              
02036    2036 3  0,0100 0                XCH      curtest        ; load last passed test into A
02037    2037 5  0,0100 0                TS       curtest        
                          
                          end            EQU      *              
02040    2040 0  1,2040 1                TC       end            ; finished, TC trap
                          
                          ; ----------------------------------------------
                          ; INITIALIZE FOR START OF TESTING
                          
02041    2041     00000 1 STRTcode       DS       START          
                          
                          begin          EQU      *              
02042    2042 3  1,2041 0                XCH      STRTcode       
02043    2043 5  0,0100 0                TS       curtest        ; set current test code to START
02044    2044 0  0,0000 0                RETURN                  
                          
                          ; ----------------------------------------------
                          ; TEST MP INSTRUCTION SUBROUTINE
                          ; L:	MP	K
                          ; Verifies the following
                          ; - Set C(A,LP) = b(A) * C(K)
                          ; - Take next instruction from L+1
                          ; ----------------------------------------------
                          
02045    2045     00001 0 MPcode         DS       MPtst          ; code for this test
                          
                          ; MP test values
                          ;                          
02046    2046     00037 0 MPstart        DS       31             ; loop MPstart+1 times
                          
                          ; C(A) test values
                          mp1            EQU      *              
                          ; check boundary conditions
02047    2047     37777 1                DS       %37777         ; check #00 (+16383 * +16383)
02050    2050     37777 1                DS       %37777         ; check #01 (+16383 * -16383)
02051    2051     40000 0                DS       %40000         ; check #02 (-16383 * +16383)
02052    2052     40000 0                DS       %40000         ; check #03 (-16383 * -16383)
02053    2053     00000 1                DS       %00000         ; check #04 (+0 * +0)
02054    2054     00000 1                DS       %00000         ; check #05 (+0 * -0)
02055    2055     77777 0                DS       %77777         ; check #06 (-0 * +0)
02056    2056     77777 0                DS       %77777         ; check #07 (-0 * -0)
                          ; randomly selected checks (one word product)
02057    2057     00007 0                DS       %00007         ; check #08 (7 * 17)
02060    2060     00021 1                DS       %00021         ; check #09 (17 * 7)
02061    2061     00035 1                DS       %00035         ; check #10 (29 * 41)
02062    2062     00051 0                DS       %00051         ; check #11 (41 * 29)
02063    2063     00065 1                DS       %00065         ; check #12 (53 * 67)
02064    2064     00103 0                DS       %00103         ; check #13 (67 * 53)
02065    2065     00117 0                DS       %00117         ; check #14 (79 * 97)
02066    2066     00141 0                DS       %00141         ; check #15 (97 * 79)
02067    2067     00153 0                DS       %00153         ; check #16 (107 * 127)
02070    2070     00177 0                DS       %00177         ; check #17 (127 * 107)
                          ; randomly selected checks (two word product)
02071    2071     00375 0                DS       %00375         ; check #18 (253 * 197)
02072    2072     00305 1                DS       %00305         ; check #19 (197 * 253)
02073    2073     00655 1                DS       %00655         ; check #20 (429 * 351)
02074    2074     00537 0                DS       %00537         ; check #21 (351 * 429)
02075    2075     02455 1                DS       %02455         ; check #22 (1325 * 1067)
02076    2076     02053 0                DS       %02053         ; check #23 (1067 * 1325)
02077    2077     11151 1                DS       %11151         ; check #24 (4713 * 3605)
02100    2100     07025 1                DS       %07025         ; check #25 (3605 * 4713)
02101    2101     20032 1                DS       %20032         ; check #26 (8218 * 7733)
02102    2102     17065 1                DS       %17065         ; check #27 (7733 * 8218)
02103    2103     30273 1                DS       %30273         ; check #28 (12475 * 11501)
02104    2104     26355 0                DS       %26355         ; check #29 (11501 * 12475)
02105    2105     37553 0                DS       %37553         ; check #30 (16235 * 15372)
02106    2106     36014 1                DS       %36014         ; check #31 (15372 * 16235)
                          
                          ; C(K) test values
                          mp2            EQU      *              
                          ; check boundary conditions
02107    2107     37777 1                DS       %37777         ; check #00 (+16383 * +16383)
02110    2110     40000 0                DS       %40000         ; check #01 (+16383 * -16383)
02111    2111     37777 1                DS       %37777         ; check #02 (-16383 * +16383)
02112    2112     40000 0                DS       %40000         ; check #03 (-16383 * -16383)
02113    2113     00000 1                DS       %00000         ; check #04 (+0 * +0)
02114    2114     77777 0                DS       %77777         ; check #05 (+0 * -0)
02115    2115     00000 1                DS       %00000         ; check #06 (-0 * +0)
02116    2116     77777 0                DS       %77777         ; check #07 (-0 * -0)
                          ; randomly selected checks (one word product)
02117    2117     00021 1                DS       %00021         ; check #08 (7 * 17)
02120    2120     00007 0                DS       %00007         ; check #09 (17 * 7)
02121    2121     00051 0                DS       %00051         ; check #10 (29 * 41)
02122    2122     00035 1                DS       %00035         ; check #11 (41 * 29)
02123    2123     00103 0                DS       %00103         ; check #12 (53 * 67)
02124    2124     00065 1                DS       %00065         ; check #13 (67 * 53)
02125    2125     00141 0                DS       %00141         ; check #14 (79 * 97)
02126    2126     00117 0                DS       %00117         ; check #15 (97 * 79)
02127    2127     00177 0                DS       %00177         ; check #16 (107 * 127)
02130    2130     00153 0                DS       %00153         ; check #17 (127 * 107)
                          ; randomly selected checks (two word product)
02131    2131     00305 1                DS       %00305         ; check #18 (253 * 197)
02132    2132     00375 0                DS       %00375         ; check #19 (197 * 253)
02133    2133     00537 0                DS       %00537         ; check #20 (429 * 351)
02134    2134     00655 1                DS       %00655         ; check #21 (351 * 429)
02135    2135     02053 0                DS       %02053         ; check #22 (1325 * 1067)
02136    2136     02455 1                DS       %02455         ; check #23 (1067 * 1325)
02137    2137     07025 1                DS       %07025         ; check #24 (4713 * 3605)
02140    2140     11151 1                DS       %11151         ; check #25 (3605 * 4713)
02141    2141     17065 1                DS       %17065         ; check #26 (8218 * 7733)
02142    2142     20032 1                DS       %20032         ; check #27 (7733 * 8218)
02143    2143     26355 0                DS       %26355         ; check #28 (12475 * 11501)
02144    2144     30273 1                DS       %30273         ; check #29 (11501 * 12475)
02145    2145     36014 1                DS       %36014         ; check #30 (16235 * 15372)
02146    2146     37553 0                DS       %37553         ; check #31 (15372 * 16235)
                          
                          ; A = upper product
                          MPchkA         EQU      *              
                          ; check boundary conditions
02147    2147     37776 0                DS       %37776         ; check #00
02150    2150     40001 1                DS       %40001         ; check #01
02151    2151     40001 1                DS       %40001         ; check #02
02152    2152     37776 0                DS       %37776         ; check #03
02153    2153     00000 1                DS       %00000         ; check #04
02154    2154     77777 0                DS       %77777         ; check #05
02155    2155     77777 0                DS       %77777         ; check #06
02156    2156     00000 1                DS       %00000         ; check #07
                          ; randomly selected checks
02157    2157     00000 1                DS       %00000         ; check #08 (7 * 17)
02160    2160     00000 1                DS       %00000         ; check #09 (17 * 7)
02161    2161     00000 1                DS       %00000         ; check #10 (29 * 41)
02162    2162     00000 1                DS       %00000         ; check #11 (41 * 29)
02163    2163     00000 1                DS       %00000         ; check #12 (53 * 67)
02164    2164     00000 1                DS       %00000         ; check #13 (67 * 53)
02165    2165     00000 1                DS       %00000         ; check #14 (79 * 97)
02166    2166     00000 1                DS       %00000         ; check #15 (97 * 79)
02167    2167     00000 1                DS       %00000         ; check #16 (107 * 127)
02170    2170     00000 1                DS       %00000         ; check #17 (127 * 107)
                          ; randomly selected checks (two word product)
02171    2171     00003 1                DS       %00003         ; check #18 (253 * 197)
02172    2172     00003 1                DS       %00003         ; check #19 (197 * 253)
02173    2173     00011 1                DS       %00011         ; check #20 (429 * 351)
02174    2174     00011 1                DS       %00011         ; check #21 (351 * 429)
02175    2175     00126 1                DS       %00126         ; check #22 (1325 * 1067)
02176    2176     00126 1                DS       %00126         ; check #23 (1067 * 1325)
02177    2177     02015 1                DS       %02015         ; check #24 (4713 * 3605)
02200    2200     02015 1                DS       %02015         ; check #25 (3605 * 4713)
02201    2201     07446 0                DS       %07446         ; check #26 (8218 * 7733)
02202    2202     07446 0                DS       %07446         ; check #27 (7733 * 8218)
02203    2203     21065 1                DS       %21065         ; check #28 (12475 * 11501)
02204    2204     21065 1                DS       %21065         ; check #29 (11501 * 12475)
02205    2205     35600 1                DS       %35600         ; check #30 (16235 * 15372)
02206    2206     35600 1                DS       %35600         ; check #31 (15372 * 16235)
                          
                          ; LP = lower product
                          MPchkLP        EQU      *              
                          ; check boundary conditions
02207    2207     00001 0                DS       %00001         ; check #00
02210    2210     77776 1                DS       %77776         ; check #01
02211    2211     77776 1                DS       %77776         ; check #02
02212    2212     00001 0                DS       %00001         ; check #03
02213    2213     00000 1                DS       %00000         ; check #04
02214    2214     77777 0                DS       %77777         ; check #05
02215    2215     77777 0                DS       %77777         ; check #06
02216    2216     00000 1                DS       %00000         ; check #07
                          ; randomly selected checks
02217    2217     00167 1                DS       %00167         ; check #08 (7 * 17)
02220    2220     00167 1                DS       %00167         ; check #09 (17 * 7)
02221    2221     02245 0                DS       %02245         ; check #10 (29 * 41)
02222    2222     02245 0                DS       %02245         ; check #11 (41 * 29)
02223    2223     06737 1                DS       %06737         ; check #12 (53 * 67)
02224    2224     06737 1                DS       %06737         ; check #13 (67 * 53)
02225    2225     16757 0                DS       %16757         ; check #14 (79 * 97)
02226    2226     16757 0                DS       %16757         ; check #15 (97 * 79)
02227    2227     32425 0                DS       %32425         ; check #16 (107 * 127)
02230    2230     32425 0                DS       %32425         ; check #17 (127 * 107)
                          ; randomly selected checks (two word product)
02231    2231     01261 0                DS       %01261         ; check #18 (253 * 197)
02232    2232     01261 0                DS       %01261         ; check #19 (197 * 253)
02233    2233     06063 1                DS       %06063         ; check #20 (429 * 351)
02234    2234     06063 1                DS       %06063         ; check #21 (351 * 429)
02235    2235     11217 0                DS       %11217         ; check #22 (1325 * 1067)
02236    2236     11217 0                DS       %11217         ; check #23 (1067 * 1325)
02237    2237     00235 0                DS       %00235         ; check #24 (4713 * 3605)
02240    2240     00235 0                DS       %00235         ; check #24 (3605 * 4713)
02241    2241     30542 1                DS       %30542         ; check #26 (8218 * 7733)
02242    2242     30542 1                DS       %30542         ; check #27 (7733 * 8218)
02243    2243     00437 1                DS       %00437         ; check #28 (12475 * 11501)
02244    2244     00437 1                DS       %00437         ; check #29 (11501 * 12475)
02245    2245     06404 1                DS       %06404         ; check #30 (16235 * 15372)
02246    2246     06404 1                DS       %06404         ; check #31 (15372 * 16235)
                          
                          chkMP          EQU      *              
02247    2247 3  0,0001 0                XCH      Q              
02250    2250 5  0,0101 1                TS       savQ           ; save return address
                          
02251    2251 3  1,2045 1                CAF      MPcode         
02252    2252 5  0,0100 0                TS       curtest        ; set current test code to this test
                          
                          ; Decrementing loop
                          ;	- always executes at least once (tests at end of loop)		
                          ;	- loops 'MPstart+1' times; decrements MPindex
02253    2253 3  1,2046 1                XCH      MPstart        ; initialize loop counter
                          
                          ;------------------------------ 
                          ; MP check starts here
                          ; uses MPindex to access test values
                          ;------------------------------ 
                          MPloop         EQU      *              
02254    2254 5  0,0102 1                TS       MPindex        ; save new index
                          
02255    2255 3  2,5777 0                CAF      EXTENDER       
02256    2256 6  0,0102 1                AD       MPindex        
02257    2257 5  0,0103 0                TS       MPXTND         
                          
02260    2260 2  0,0102 0                INDEX    MPindex        
02261    2261 3  1,2047 0                CAF      mp1            
02262    2262 2  0,0103 1                INDEX    MPXTND         ; EXTEND using MPindex
02263    2263 4  1,2107 1                MP       mp2            
                          
                          ; verify C(A)
02264    2264 4  0,0000 0                COM                     ; get -A
02265    2265 2  0,0102 0                INDEX    MPindex        
02266    2266 6  1,2147 1                AD       MPchkA         ; put (-A) + expected value in A
02267    2267 1  0,0000 0                CCS      A              ; compare
02270    2270 0  1,2036 0                TC       fail           ; >0 (A < expected value)
02271    2271 0  1,2036 0                TC       fail           ; +0
02272    2272 0  1,2036 0                TC       fail           ; <0 (A > expected value)
                          
                          ; verify C(LP)
02273    2273 4  0,0003 0                CS       LP             ; get -A
02274    2274 2  0,0102 0                INDEX    MPindex        
02275    2275 6  1,2207 0                AD       MPchkLP        ; put (-A) + expected value in A
02276    2276 1  0,0000 0                CCS      A              ; compare
02277    2277 0  1,2036 0                TC       fail           ; >0 (A < expected value)
02300    2300 0  1,2036 0                TC       fail           ; +0
02301    2301 0  1,2036 0                TC       fail           ; <0 (A > expected value)
                          
                          ; end of MP check
                          ;------------------------------ 
                          
02302    2302 1  0,0102 0                CCS      MPindex        ; done?
02303    2303 0  1,2254 0                TC       MPloop         ; not yet, do next check
                          
02304    2304 3  0,0101 1                XCH      savQ           
02305    2305 5  0,0001 0                TS       Q              ; restore return address
02306    2306 0  0,0000 0                RETURN                  
                          
                          
                          
                          ; ----------------------------------------------
                          ; TEST DV INSTRUCTION SUBROUTINE
                          ; L:	DV	K
                          ; Verifies the following:
                          ; - Set C(A) = b(A) / C(K)
                          ; - Set C(Q) = - abs(remainder)
                          ; - Set C(LP) > 0 if quotient is positive
                          ; - Set C(LP) < 0 if quotient is negative
                          ; - Take next instruction from L+1
                          
02307    2307     00002 0 DVcode         DS       DVtst          ; code for this test
                          
                          ; DV test values
                          ;                          
02310    2310     00037 0 DVstart        DS       31             ; loop DVstart+1 times
                          
                          ; C(A) test values
                          div1           EQU      *              
02311    2311     00000 1                DS       %00000         ; check #00 (+0/+0)
02312    2312     00000 1                DS       %00000         ; check #01 (+0/-0)
02313    2313     77777 0                DS       %77777         ; check #02 (-0/+0)
02314    2314     77777 0                DS       %77777         ; check #03 (-0/-0)
                          
02315    2315     00000 1                DS       %00000         ; check #04 (+0/+1)
02316    2316     00000 1                DS       %00000         ; check #05 (+0/-1)
02317    2317     77777 0                DS       %77777         ; check #06 (-0/+1)
02320    2320     77777 0                DS       %77777         ; check #07 (-0/-1)
                          
02321    2321     00000 1                DS       %00000         ; check #08 (+0/+16383)
02322    2322     00000 1                DS       %00000         ; check #09 (+0/-16383)
02323    2323     77777 0                DS       %77777         ; check #10 (-0/+16383)
02324    2324     77777 0                DS       %77777         ; check #11 (-0/-16383)
                          
02325    2325     37776 0                DS       %37776         ; check #12 (+16382/+16383)
02326    2326     37776 0                DS       %37776         ; check #13 (+16382/-16383)
02327    2327     40001 1                DS       %40001         ; check #14 (-16382/+16383)
02330    2330     40001 1                DS       %40001         ; check #15 (-16382/-16383)
                          
02331    2331     37777 1                DS       %37777         ; check #16 (+16383/+16383)
02332    2332     37777 1                DS       %37777         ; check #17 (+16383/-16383)
02333    2333     40000 0                DS       %40000         ; check #18 (-16383/+16383)
02334    2334     40000 0                DS       %40000         ; check #19 (-16383/-16383)
                          
02335    2335     00001 0                DS       %00001         ; check #20 (+1/+2)
02336    2336     00001 0                DS       %00001         ; check #21 (+1/+3)
02337    2337     00001 0                DS       %00001         ; check #22 (+1/+4)
02340    2340     00001 0                DS       %00001         ; check #23 (+1/+5)
02341    2341     00001 0                DS       %00001         ; check #24 (+1/+6)
02342    2342     00001 0                DS       %00001         ; check #25 (+1/+7)
02343    2343     00001 0                DS       %00001         ; check #26 (+1/+8)
                          
02344    2344     00001 0                DS       %00001         ; check #27 (+1/+6)
02345    2345     00002 0                DS       %00002         ; check #28 (+2/+12)
02346    2346     00004 0                DS       %00004         ; check #29 (+4/+24)
02347    2347     00010 0                DS       %00010         ; check #30 (+8/+48)
02350    2350     00020 0                DS       %00020         ; check #31 (+16/+96)
                          
                          ; C(K) test values
                          div2           EQU      *              
02351    2351     00000 1                DS       %00000         ; check #00 (+0/+0)
02352    2352     77777 0                DS       %77777         ; check #01 (+0/-0)
02353    2353     00000 1                DS       %00000         ; check #02 (-0/+0)
02354    2354     77777 0                DS       %77777         ; check #03 (-0/-0)
                          
02355    2355     00001 0                DS       %00001         ; check #04 (+0/+1)
02356    2356     77776 1                DS       %77776         ; check #05 (+0/-1)
02357    2357     00001 0                DS       %00001         ; check #06 (-0/+1)
02360    2360     77776 1                DS       %77776         ; check #07 (-0/-1)
                          
02361    2361     37777 1                DS       %37777         ; check #08 (+0/+16383)
02362    2362     40000 0                DS       %40000         ; check #09 (+0/-16383)
02363    2363     37777 1                DS       %37777         ; check #10 (-0/+16383)
02364    2364     40000 0                DS       %40000         ; check #11 (-0/-16383)
                          
02365    2365     37777 1                DS       %37777         ; check #12 (+16382/+16383)
02366    2366     40000 0                DS       %40000         ; check #13 (+16382/-16383)
02367    2367     37777 1                DS       %37777         ; check #14 (-16382/+16383)
02370    2370     40000 0                DS       %40000         ; check #15 (-16382/-16383)
                          
02371    2371     37777 1                DS       %37777         ; check #16 (+16383/+16383)
02372    2372     40000 0                DS       %40000         ; check #17 (+16383/-16383)
02373    2373     37777 1                DS       %37777         ; check #18 (-16383/+16383)
02374    2374     40000 0                DS       %40000         ; check #19 (-16383/-16383)
                          
02375    2375     00002 0                DS       %00002         ; check #20 (+1/+2)
02376    2376     00003 1                DS       %00003         ; check #21 (+1/+3)
02377    2377     00004 0                DS       %00004         ; check #22 (+1/+4)
02400    2400     00005 1                DS       %00005         ; check #23 (+1/+5)
02401    2401     00006 1                DS       %00006         ; check #24 (+1/+6)
02402    2402     00007 0                DS       %00007         ; check #25 (+1/+7)
02403    2403     00010 0                DS       %00010         ; check #26 (+1/+8)
                          
02404    2404     00006 1                DS       %00006         ; check #27 (+1/+6)
02405    2405     00014 1                DS       %00014         ; check #28 (+2/+12)
02406    2406     00030 1                DS       %00030         ; check #29 (+4/+24)
02407    2407     00060 1                DS       %00060         ; check #30 (+8/+48)
02410    2410     00140 1                DS       %00140         ; check #31 (+16/+96)
                          
                          ; A = quotient
                          DVchkA         EQU      *              
02411    2411     37777 1                DS       %37777         ; check #00 (+0/+0)
02412    2412     40000 0                DS       %40000         ; check #01 (+0/-0)
02413    2413     40000 0                DS       %40000         ; check #02 (-0/+0)
02414    2414     37777 1                DS       %37777         ; check #03 (-0/-0)
                          
02415    2415     00000 1                DS       %00000         ; check #04 (+0/+1)
02416    2416     77777 0                DS       %77777         ; check #05 (+0/-1)
02417    2417     77777 0                DS       %77777         ; check #06 (-0/+1)
02420    2420     00000 1                DS       %00000         ; check #07 (-0/-1)
                          
02421    2421     00000 1                DS       %00000         ; check #08 (+0/+16383)
02422    2422     77777 0                DS       %77777         ; check #09 (+0/-16383)
02423    2423     77777 0                DS       %77777         ; check #10 (-0/+16383)
02424    2424     00000 1                DS       %00000         ; check #11 (-0/-16383)
                          
02425    2425     37776 0                DS       %37776         ; check #12 (+16382/+16383)
02426    2426     40001 1                DS       %40001         ; check #13 (+16382/-16383)
02427    2427     40001 1                DS       %40001         ; check #14 (-16382/+16383)
02430    2430     37776 0                DS       %37776         ; check #15 (-16382/-16383)
                          
02431    2431     37777 1                DS       %37777         ; check #16 (+16383/+16383)
02432    2432     40000 0                DS       %40000         ; check #17 (+16383/-16383)
02433    2433     40000 0                DS       %40000         ; check #18 (-16383/+16383)
02434    2434     37777 1                DS       %37777         ; check #19 (-16383/-16383)
                          
02435    2435     20000 0                DS       %20000         ; check #20 (+1/+2)
02436    2436     12525 0                DS       %12525         ; check #21 (+1/+3)
02437    2437     10000 0                DS       %10000         ; check #22 (+1/+4)
02440    2440     06314 1                DS       %06314         ; check #23 (+1/+5)
02441    2441     05252 1                DS       %05252         ; check #24 (+1/+6)
02442    2442     04444 1                DS       %04444         ; check #25 (+1/+7)
02443    2443     04000 0                DS       %04000         ; check #26 (+1/+8)
                          
02444    2444     05252 1                DS       %05252         ; check #27 (+1/+6)
02445    2445     05252 1                DS       %05252         ; check #28 (+2/+12)
02446    2446     05252 1                DS       %05252         ; check #29 (+4/+24)
02447    2447     05252 1                DS       %05252         ; check #30 (+8/+48)
02450    2450     05252 1                DS       %05252         ; check #31 (+16/+96)
                          
                          ; Q = remainder
                          DVchkQ         EQU      *              
02451    2451     77777 0                DS       %77777         ; check #00 (+0/+0)
02452    2452     77777 0                DS       %77777         ; check #01 (+0/-0)
02453    2453     77777 0                DS       %77777         ; check #02 (-0/+0)
02454    2454     77777 0                DS       %77777         ; check #03 (-0/-0)
                          
02455    2455     77777 0                DS       %77777         ; check #04 (+0/+1)
02456    2456     77777 0                DS       %77777         ; check #05 (+0/-1)
02457    2457     77777 0                DS       %77777         ; check #06 (-0/+1)
02460    2460     77777 0                DS       %77777         ; check #07 (-0/-1)
                          
02461    2461     77777 0                DS       %77777         ; check #08 (+0/+16383)
02462    2462     77777 0                DS       %77777         ; check #09 (+0/-16383)
02463    2463     77777 0                DS       %77777         ; check #10 (-0/+16383)
02464    2464     77777 0                DS       %77777         ; check #11 (-0/-16383)
                          
02465    2465     40001 1                DS       %40001         ; check #12 (+16382/+16383)
02466    2466     40001 1                DS       %40001         ; check #13 (+16382/-16383)
02467    2467     40001 1                DS       %40001         ; check #14 (-16382/+16383)
02470    2470     40001 1                DS       %40001         ; check #15 (-16382/-16383)
                          
02471    2471     40000 0                DS       %40000         ; check #16 (+16383/+16383)
02472    2472     40000 0                DS       %40000         ; check #17 (+16383/-16383)
02473    2473     40000 0                DS       %40000         ; check #18 (-16383/+16383)
02474    2474     40000 0                DS       %40000         ; check #19 (-16383/-16383)
                          
02475    2475     77777 0                DS       %77777         ; check #20 (+1/+2)
02476    2476     77776 1                DS       %77776         ; check #21 (+1/+3)
02477    2477     77777 0                DS       %77777         ; check #22 (+1/+4)
02500    2500     77773 1                DS       %77773         ; check #23 (+1/+5)
02501    2501     77773 1                DS       %77773         ; check #24 (+1/+6)
02502    2502     77773 1                DS       %77773         ; check #25 (+1/+7)
02503    2503     77777 0                DS       %77777         ; check #26 (+1/+8)
                          
02504    2504     77773 1                DS       %77773         ; check #27 (+1/+6)
02505    2505     77767 1                DS       %77767         ; check #28 (+2/+12)
02506    2506     77757 1                DS       %77757         ; check #29 (+4/+24)
02507    2507     77737 1                DS       %77737         ; check #30 (+8/+48)
02510    2510     77677 1                DS       %77677         ; check #31 (+16/+96)
                          
                          ; LP = sign
                          DVchkLP        EQU      *              
02511    2511     00001 0                DS       %00001         ; check #00 (+0/+0)
02512    2512     40000 0                DS       %40000         ; check #01 (+0/-0)
02513    2513     40001 1                DS       %40001         ; check #02 (-0/+0)
02514    2514     00001 0                DS       %00001         ; check #03 (-0/-0)
                          
02515    2515     00001 0                DS       %00001         ; check #04 (+0/+1)
02516    2516     40000 0                DS       %40000         ; check #05 (+0/-1)
02517    2517     40001 1                DS       %40001         ; check #06 (-0/+1)
02520    2520     00001 0                DS       %00001         ; check #07 (-0/-1)
                          
02521    2521     00001 0                DS       %00001         ; check #08 (+0/+16383)
02522    2522     40000 0                DS       %40000         ; check #09 (+0/-16383)
02523    2523     40001 1                DS       %40001         ; check #10 (-0/+16383)
02524    2524     00001 0                DS       %00001         ; check #11 (-0/-16383)
                          
02525    2525     00001 0                DS       %00001         ; check #12 (+16382/+16383)
02526    2526     40000 0                DS       %40000         ; check #13 (+16382/-16383)
02527    2527     40001 1                DS       %40001         ; check #14 (-16382/+16383)
02530    2530     00001 0                DS       %00001         ; check #15 (-16382/-16383)
                          
02531    2531     00001 0                DS       %00001         ; check #16 (+16383/+16383)
02532    2532     40000 0                DS       %40000         ; check #17 (+16383/-16383)
02533    2533     40001 1                DS       %40001         ; check #18 (-16383/+16383)
02534    2534     00001 0                DS       %00001         ; check #19 (-16383/-16383)
                          
02535    2535     00001 0                DS       %00001         ; check #20 (+1/+2)
02536    2536     00001 0                DS       %00001         ; check #21 (+1/+3)
02537    2537     00001 0                DS       %00001         ; check #22 (+1/+4)
02540    2540     00001 0                DS       %00001         ; check #23 (+1/+5)
02541    2541     00001 0                DS       %00001         ; check #24 (+1/+6)
02542    2542     00001 0                DS       %00001         ; check #25 (+1/+7)
02543    2543     00001 0                DS       %00001         ; check #26 (+1/+8)
                          
02544    2544     00001 0                DS       %00001         ; check #27 (+1/+6)
02545    2545     00001 0                DS       %00001         ; check #28 (+2/+12)
02546    2546     00001 0                DS       %00001         ; check #29 (+4/+24)
02547    2547     00001 0                DS       %00001         ; check #30 (+8/+48)
02550    2550     00001 0                DS       %00001         ; check #31 (+16/+96)
                          
                          
                          chkDV          EQU      *              
02551    2551 3  0,0001 0                XCH      Q              
02552    2552 5  0,0101 1                TS       savQ           ; save return address
                          
02553    2553 3  1,2307 1                CAF      DVcode         
02554    2554 5  0,0100 0                TS       curtest        ; set code identifying current test
                          
                          
                          ; Decrementing loop
                          ;	- always executes at least once (tests at end of loop)		
                          ;	- loops 'DVstart+1' times; decrements DVindex
02555    2555 3  1,2310 1                XCH      DVstart        ; initialize loop counter
                          
                          ;------------------------------ 
                          
                          ; DV check starts here
                          ; uses DVindex to access test values
                          DVloop         EQU      *              
02556    2556 5  0,0105 0                TS       DVindex        ; save new index
                          
02557    2557 3  2,5777 0                CAF      EXTENDER       
02560    2560 6  0,0105 0                AD       DVindex        
02561    2561 5  0,0106 0                TS       DVXTND         
                          
02562    2562 2  0,0105 1                INDEX    DVindex        
02563    2563 3  1,2311 0                CAF      div1           
02564    2564 2  0,0106 1                INDEX    DVXTND         ; EXTEND using DVindex
02565    2565 5  1,2351 1                DV       div2           
02566    2566 5  0,0104 1                TS       DVsavA         
                          
                          ; verify C(Q)
02567    2567 4  0,0001 1                CS       Q              ; get -A
02570    2570 2  0,0105 1                INDEX    DVindex        
02571    2571 6  1,2451 0                AD       DVchkQ         ; put (-A) + expected value in A
02572    2572 1  0,0000 0                CCS      A              ; compare
02573    2573 0  1,2036 0                TC       fail           ; >0 (A < expected value)
02574    2574 0  1,2036 0                TC       fail           ; +0
02575    2575 0  1,2036 0                TC       fail           ; <0 (A > expected value)
                          
                          ; verify C(A)
02576    2576 4  0,0104 0                CS       DVsavA         ; get -A
02577    2577 2  0,0105 1                INDEX    DVindex        
02600    2600 6  1,2411 1                AD       DVchkA         ; put (-A) + expected value in A
02601    2601 1  0,0000 0                CCS      A              ; compare
02602    2602 0  1,2036 0                TC       fail           ; >0 (A < expected value)
02603    2603 0  1,2036 0                TC       fail           ; +0
02604    2604 0  1,2036 0                TC       fail           ; <0 (A > expected value)
                          
                          ; verify C(LP)
02605    2605 4  0,0003 0                CS       LP             ; get -A
02606    2606 2  0,0105 1                INDEX    DVindex        
02607    2607 6  1,2511 0                AD       DVchkLP        ; put (-A) + expected value in A
02610    2610 1  0,0000 0                CCS      A              ; compare
02611    2611 0  1,2036 0                TC       fail           ; >0 (A < expected value)
02612    2612 0  1,2036 0                TC       fail           ; +0
02613    2613 0  1,2036 0                TC       fail           ; <0 (A > expected value)
                          
                          ; end of DV check
                          ;------------------------------ 
                          
02614    2614 1  0,0105 1                CCS      DVindex        ; done?
02615    2615 0  1,2556 0                TC       DVloop         ; not yet, do next check
                          
02616    2616 3  0,0101 1                XCH      savQ           
02617    2617 5  0,0001 0                TS       Q              ; restore return address
02620    2620 0  0,0000 0                RETURN                  
                          ; ----------------------------------------------
                          ; TEST SU INSTRUCTION SUBROUTINE
                          ; L:	SU	K
                          ; Verifies the following:
                          ; - Set C(A) = b(A) - C(K)
                          ; - Take next instruction from L+1
                          ; - if C(A) has positive overflow,
                          ; -- increment overflow counter by 1
                          ; - if C(A) has negative overflow,
                          ; -- decrement overflow counter by 1
                          
02621    2621     00003 1 SUcode         DS       SUtst          ; code for this test
                          
02622    2622     00000 1 SUplus0        DS       +0             
02623    2623     00001 0 SUplus1        DS       1              
02624    2624     77776 1 SUmin1         DS       -1             
                          
02625    2625     25252 0 SU25252        DS       %25252         ; +10922 decimal
02626    2626     12525 0 SU12525        DS       %12525         ; +5461 decimal
02627    2627     37777 1 SU37777        DS       %37777         ; largest positive number
02630    2630     12524 1 SU12524        DS       %12524         ; positive overflow of %25252+%25252
                          
02631    2631     52525 1 SU52525        DS       %52525         ; -10922 decimal
02632    2632     65252 1 SU65252        DS       %65252         ; -5461 decimal
02633    2633     40000 0 SU40000        DS       %40000         ; largest negative number
02634    2634     65253 0 SU65253        DS       %65253         ; negative overflow of %52525+65252
                          
                          chkSU          EQU      *              
02635    2635 3  0,0001 0                XCH      Q              
02636    2636 5  0,0101 1                TS       savQ           ; save return address
                          
02637    2637 3  1,2621 0                CAF      SUcode         
02640    2640 5  0,0100 0                TS       curtest        ; set current test code to this test
                          
                          ; NOTE: these test are similar to the checks for AD, but
                          ; the AD augend value has been changed to negative and AD has
                          ; been changed to SU. The results produced by this change
                          ; are identical to AD, and so the checks are the same.
                          
                          ; TEST1: difference positive, no overflow
                          ; sub: %25252 - %65252 = %37777 (sign + 14 magnitude)
02641    2641 3  1,2625 1                CAF      SU25252        
02642    2642 2  0,0000 1                EXTEND                  
02643    2643 6  1,2632 1                SU       SU65252        
                          ; verify C(A) = %37777
02644    2644 4  0,0000 0                COM                     ; get -A
02645    2645 6  1,2627 0                AD       SU37777        ; put (-A) + expected value in A
02646    2646 1  0,0000 0                CCS      A              ; compare
02647    2647 0  1,2036 0                TC       fail           ; >0 (A < expected value)
02650    2650 0  1,2036 0                TC       fail           ; +0
02651    2651 0  1,2036 0                TC       fail           ; <0 (A > expected value)
                          
                          ; TEST2: difference negative, no overflow (sign + 14 magnitude)
                          ; sub: %52525 - %12525 = %40000
02652    2652 3  1,2631 1                CAF      SU52525        
02653    2653 2  0,0000 1                EXTEND                  
02654    2654 6  1,2626 1                SU       SU12525        
                          ; verify C(A) = %40000
02655    2655 4  0,0000 0                COM                     ; get -A
02656    2656 6  1,2633 0                AD       SU40000        ; put (-A) + expected value in A
02657    2657 1  0,0000 0                CCS      A              ; compare
02660    2660 0  1,2036 0                TC       fail           ; >0 (A < expected value)
02661    2661 0  1,2036 0                TC       fail           ; +0
02662    2662 0  1,2036 0                TC       fail           ; <0 (A > expected value)
                          
                          ; TEST3: difference positive, overflow
                          ; initialize overflow counter and positive overflow storage
02663    2663 3  1,2622 0                CAF      SUplus0        
02664    2664 5  0,0034 0                TS       OVFCNTR        
02665    2665 5  0,0107 1                TS       SUk            
                          ; sub: %25252 - %52525 = %52524 (sign + 14 magnitude)
02666    2666 3  1,2625 1                CAF      SU25252        
02667    2667 2  0,0000 1                EXTEND                  
02670    2670 6  1,2631 1                SU       SU52525        
02671    2671 5  0,0107 1                TS       SUk            ; store positive overflow
02672    2672 0  1,2036 0                TC       fail           
                          ; verify SUk = %12524
02673    2673 4  0,0107 0                CS       SUk            ; get -A
02674    2674 6  1,2630 0                AD       SU12524        ; put (-A) + expected value in A
02675    2675 1  0,0000 0                CCS      A              ; compare
02676    2676 0  1,2036 0                TC       fail           ; >0 (A < expected value)
02677    2677 0  1,2036 0                TC       fail           ; +0
02700    2700 0  1,2036 0                TC       fail           ; <0 (A > expected value)
                          ; verify overflow counter =%00001
02701    2701 4  0,0034 1                CS       OVFCNTR        ; get -A
02702    2702 6  1,2623 1                AD       SUplus1        ; put (-A) + expected value in A
02703    2703 1  0,0000 0                CCS      A              ; compare
02704    2704 0  1,2036 0                TC       fail           ; >0 (A < expected value)
02705    2705 0  1,2036 0                TC       fail           ; +0
02706    2706 0  1,2036 0                TC       fail           ; <0 (A > expected value)
                          
                          ; TEST4: difference negative, overflow
02707    2707 3  1,2622 0                CAF      SUplus0        
02710    2710 5  0,0034 0                TS       OVFCNTR        
02711    2711 5  0,0107 1                TS       SUk            
                          ; add: %52525 + %25252 = %25253 (sign + 14 magnitude)
02712    2712 3  1,2631 1                CAF      SU52525        
02713    2713 2  0,0000 1                EXTEND                  
02714    2714 6  1,2625 1                SU       SU25252        
02715    2715 5  0,0107 1                TS       SUk            ; store negative overflow
02716    2716 0  1,2036 0                TC       fail           
                          ; verify SUk = %65253
02717    2717 4  0,0107 0                CS       SUk            ; get -A
02720    2720 6  1,2634 1                AD       SU65253        ; put (-A) + expected value in A
02721    2721 1  0,0000 0                CCS      A              ; compare
02722    2722 0  1,2036 0                TC       fail           ; >0 (A < expected value)
02723    2723 0  1,2036 0                TC       fail           ; +0
02724    2724 0  1,2036 0                TC       fail           ; <0 (A > expected value)
                          ; verify overflow counter =%77776
02725    2725 4  0,0034 1                CS       OVFCNTR        ; get -A
02726    2726 6  1,2624 0                AD       SUmin1         ; put (-A) + expected value in A
02727    2727 1  0,0000 0                CCS      A              ; compare
02730    2730 0  1,2036 0                TC       fail           ; >0 (A < expected value)
02731    2731 0  1,2036 0                TC       fail           ; +0
02732    2732 0  1,2036 0                TC       fail           ; <0 (A > expected value)
                          
02733    2733 3  0,0101 1                XCH      savQ           
02734    2734 5  0,0001 0                TS       Q              ; restore return address
02735    2735 0  0,0000 0                RETURN                  
                          ; ----------------------------------------------
                          ; PASSED ALL TESTS!
                          
02736    2736     12345 0 PASScode       DS       PASS           
                          
                          finish         EQU      *              
02737    2737 3  1,2736 1                CAF      PASScode       
02740    2740 5  0,0100 0                TS       curtest        ; set current test code to PASS
02741    2741 0  0,0000 0                RETURN                  
                          
                          ; ----------------------------------------------
                          ; INTERRUPT SERVICE ROUTINE
                          
                          goT3           EQU      *              
                          goER           EQU      *              
                          goDS           EQU      *              
                          goKEY          EQU      *              
                          goUP           EQU      *              
                          
                          
                          endRUPT        EQU      *              
02742    2742 3  0,0027 1                XCH      QRUPT          ; restore Q
02743    2743 5  0,0001 0                TS       Q              
02744    2744 3  0,0026 0                XCH      ARUPT          ; restore A
02745    2745 2  0,0000 1                RESUME                  ; finished, go back
                          
                          
                          

Assembly complete. Errors = 0

Symbol table:
START          000000   MPtst          000001   DVtst          000002   
SUtst          000003   OVFCNTR        000034   PASS           012345   
EXTENDER       005777   curtest        000100   savQ           000101   
MPindex        000102   MPXTND         000103   DVsavA         000104   
DVindex        000105   DVXTND         000106   SUk            000107   
GOPROG         002000   T3RUPT         002004   ERRUPT         002010   
DSRUPT         002014   KEYRUPT        002020   UPRUPT         002024   
goMAIN         002030   fail           002036   end            002040   
STRTcode       002041   begin          002042   MPcode         002045   
MPstart        002046   mp1            002047   mp2            002107   
MPchkA         002147   MPchkLP        002207   chkMP          002247   
MPloop         002254   DVcode         002307   DVstart        002310   
div1           002311   div2           002351   DVchkA         002411   
DVchkQ         002451   DVchkLP        002511   chkDV          002551   
DVloop         002556   SUcode         002621   SUplus0        002622   
SUplus1        002623   SUmin1         002624   SU25252        002625   
SU12525        002626   SU37777        002627   SU12524        002630   
SU52525        002631   SU65252        002632   SU40000        002633   
SU65253        002634   chkSU          002635   PASScode       002736   
finish         002737   goT3           002742   goER           002742   
goDS           002742   goKEY          002742   goUP           002742   
endRUPT        002742   ARUPT          000026   Q              000001   
QRUPT          000027   A              000000   LP             000003   
