Block I Apollo Guidance Computer (AGC4) assembler version 1.5

First pass: generate symbol table.
Second pass: generate object code.

                          ;========================================================================== 
                          ; AGC (file:agc.asm) 
                          ; 
                          ; Version: 1.0 
                          ; Author: John Pultorak 
                          ; Date: 4/7/2002 
                          ; 
                          ; PURPOSE: 
                          ; AGC Block 1 demonstration. Includes WAITLIST, EXEC, PINBALL (DSKY routines), 
                          ; NOUN tables, VERB tables. 
                          ; 
                          ; OPERATION: 
                          ; TBD. 
                          ; 
                          ; ERRATA: 
                          ; - Written for the AGC4R assembler. The assembler directives and syntax 
                          ; differ somewhat from the original AGC assembler. 
                          ; - No special effort was made to optimize the algorithms or memory usage. 
                          ; 
                          ; SOURCES: 
                          ; Information on the Block 1 architecture: instruction set, instruction 
                          ; sequences, registers, register transfers, control pulses, memory and 
                          ; memory addressing, I/O assignments, interrupts, and involuntary counters 
                          ; was obtained from: 
                          ; 
                          ; A. Hopkins, R. Alonso, and H. Blair-Smith, "Logical Description 
                          ; for the Apollo Guidance Computer (AGC4)", R-393, 
                          ; MIT Instrumentation Laboratory, Cambridge, MA, Mar. 1963. 
                          ; 
                          ; Supplementary AGC hardware information was obtained from: 
                          ; 
                          ; R. Alonso, J. H. Laning, Jr. and H. Blair-Smith, "Preliminary 
                          ; MOD 3C Programmer's Manual", E-1077, MIT Instrumentation 
                          ; Laboratory, Cambridge, MA, Nov. 1961. 
                          ; 
                          ; B. I. Savage and A. Drake, "AGC4 Basic Training Manual, Volume I", 
                          ; E-2052, MIT Instrumentation Laboratory, Cambridge, 
                          ; MA, Jan. 1967. 
                          ; 
                          ; E. C. Hall, "MIT's Role in Project Apollo, Volume III, Computer 
                          ; Subsystem", R-700, MIT Charles Stark Draper Laboratory, 
                          ; Cambridge, MA, Aug. 1972. 
                          ; 
                          ; A. Hopkins, "Guidance Computer Design, Part VI", source unknown. 
                          ;; 
                          ; E, C. Hall, "Journey to the Moon: The History of the Apollo 
                          ; Guidance Computer", AIAA, Reston VA, 1996. 
                          ; 
                          ; AGC software information was obtained from: 
                          ; 
                          ; AGC Block II COLOSSUS rev 249 assembly listing, Oct 28, 1968. (A 
                          ; listing of the 1st 50% of the build. It encludes the entire 
                          ; eraseable memory, restart initialization, T4RUPT, and the 
                          ; entire set of DSKY routines. A small subset of instructions 
                          ; had to be converted from Block II to Block I). 
                          ; 
                          ; A. I. Green and J. J. Rocchio, "Keyboard and Display System Program 
                          ; for AGC (Program Sunrise)", E-1574, MIT Instrumentation 
                          ; Laboratory, Cambridge, MA, Aug. 1964. Contains detailed 
                          ; flowcharts and design materials for the DSKY software. 
                          ; 
                          ; A. Hopkins, R. Alonso, and H. Blair-Smith, "Logical Description 
                          ; for the Apollo Guidance Computer (AGC4)", R-393, 
                          ; MIT Instrumentation Laboratory, Cambridge, MA, Mar. 1963. 
                          ; Contains the software interfaces for EXEC and WAITLIST, and 
                          ; some examples of a dual precision (DP) math library. 
                          ; 
                          ;========================================================================== 
                          
                          ; ERASEABLE MEMORY DECLARATIONS 
                          
                                         ORG      BANK0          ; immediately following counters 
                                         INCL     exec_e.asm     ; EXEC variables 
                          ;========================================================================== 
                          ; EXEC erasable memory segment (file:exec_e.asm) 
                          ; 
                          ; Version: 1.0 
                          ; Author: John Pultorak 
                          ; Date: 04/26/2002 
                          ; 
                          ; PURPOSE: 
                          ; Eraseable memory variables and structures for the EXEX. See the EXEC 
                          ; source code file for more information. 
                          ; 
                          ; The COLOSSUS version of this is on p. 70. 
                          ; 
                          ; ERRATA: The current version of the EXEC does not set the BANKSET parameter. 
                          ; Instead, it stores the 14-bit CADR in LOC. Also, the JOBPRIOBASE field 
                          ; has been added. 
                          ;========================================================================== 
                          
                          
                          MAXJOBS        EQU      7              ; max number jobs (not incl current job) 
                          
                          JRECSZ         EQU      13             ; size of job record (words) 
                          
                          
                          ; (COLOSSUS, p. 70) 
                          ; dynamically allocated core sets for EXEC jobs (8 sets) 
                          
                          ; record for current (running) job 
                          ; Job priority: 0=no job, 1=lowest priority job, 2=... 
                          
                          EX_currentJob  EQU      *              
                          
                          
                          MPAC           EQU      *              ; multi-purpose accumulator 
00057    0057     00000 1                DS       0              
00060    0060     00000 1                DS       0              
00061    0061     00000 1                DS       0              
00062    0062     00000 1                DS       0              
00063    0063     00000 1                DS       0              
00064    0064     00000 1                DS       0              
00065    0065     00000 1                DS       0              
                          
00066    0066     00000 1 MODE           DS       0              ; +1 for TP, +0 for DP, or -1 for vector 
00067    0067     00000 1 LOC            DS       0              ; location associated with job 
00070    0070     00000 1 BANKSET        DS       0              ; usually contains bank setting 
00071    0071     00000 1 PUSHLOC        DS       0              ; word of packed interpretive parameters 
00072    0072     00000 1 PRIORITY       DS       0              ; priority of present job and work area 
00073    0073     00000 1 JOBPRIOBASE    DS       0              ; nominal job priority 
                          
                          
                          ; records for additional jobs waiting to run 
                          
                          JREC0          EQU      *              
                                         ORG      JREC0+JRECSZ   
                          
                          JREC1          EQU      *              
                                         ORG      JREC1+JRECSZ   
                          
                          JREC2          EQU      *              
                                         ORG      JREC2+JRECSZ   
                          
                          JREC3          EQU      *              
                                         ORG      JREC3+JRECSZ   
                          
                          JREC4          EQU      *              
                                         ORG      JREC4+JRECSZ   
                          
                          JREC5          EQU      *              
                                         ORG      JREC5+JRECSZ   
                          
                          JREC6          EQU      *              
                                         ORG      JREC6+JRECSZ   
                          
                          
                          ; sorted list of jobs to run. The list is sorted by job priority 
                          ; with the highest priority job at the top of the list. Each 
                          ; entry on the list is a word index to a job record; the indexes are 
                          ; relative to 'EX_currentJob', but the current job is not on the 
                          ; list. 
                          
                          EX_jobList     EQU      *              
                                         ORG      EX_jobList+MAXJOBS 
                          
                          
                          LOCCTR         EQU      EX_jobList     ; index to next job record 
                          
                          
                          CHGJOB         EQU      1              ; change jobs at next opportunity 
                          KEEPJOB        EQU      0              ; keep the same job 
00236    0236     00000 1 newJob         DS       0              ; change flag (set to CHGJOB or KEEPJOB) 
                          
00237    0237     00000 1 EX_JW_saveQ    DS       0              ; return address 
00240    0240     00000 1 EX_JW_loopCnt  DS       0              ; loop counter 
00241    0241     00000 1 EX_JW_CADR     DS       0              ; address of job to wake 
00242    0242     00000 1 EX_JW_foundit  DS       0              ; 0=job not found, 1=found 
00243    0243     00000 1 EX_JW_jobPtr   DS       0              ; points to job rec in list 
00244    0244     00000 1 EX_JW_jobPtr2  DS       0              ; points to job rec ahead of jobPtr 
00245    0245     00000 1 EX_JW_fndIndx  DS       0              ; index to awoken record 
                          
00246    0246     00000 1 EX_AJ_saveQ    DS       0              ; return address 
00247    0247     00000 1 EX_AJ_loopCnt  DS       0              ; loop counter 
00250    0250     00000 1 EX_AJ_jobPrio  DS       0              ; priority of new job 
00251    0251     00000 1 EX_AJ_jobPtr   DS       0              ; initialized to EX_jobList at startup 
                          
00252    0252     00000 1 EX_IN_saveQ    DS       0              ; return address 
00253    0253     00000 1 EX_IN_loopCnt  DS       0              ; loop counter 
00254    0254     00000 1 EX_IN_jobPtr   DS       0              ; points to job rec in list 
00255    0255     00000 1 EX_IN_recIndex DS       0              ; record index init counter 
00256    0256     00000 1 EX_IN_field    DS       0              ; index to field from start of record 
00257    0257     00000 1 EX_IN_findx    DS       0              ; total index to field 
                          
00260    0260     00000 1 EX_MN_runAddr  DS       0              ; address of job to run 
00261    0261     00000 1 EX_MN_field    DS       0              ; index to field from start of record 
00262    0262     00000 1 EX_MN_findx    DS       0              ; total index to field 
                          
00263    0263     00000 1 EX_RM_saveQ    DS       0              ; return address 
00264    0264     00000 1 EX_RM_jobPtr   DS       0              ; points to job rec in list 
00265    0265     00000 1 EX_RM_jobPtr2  DS       0              ; points to job rec behind jobPtr 
00266    0266     00000 1 EX_RM_savePtr  DS       0              ; tmp store for index taken off list 
00267    0267     00000 1 EX_RM_loopCnt  DS       0              ; loop counter 
00270    0270     00000 1 EX_RM_retval   DS       0              ; tmp store for return value 
00271    0271     00000 1 EX_RM_field    DS       0              ; index to field from start of record 
00272    0272     00000 1 EX_RM_findx    DS       0              ; total index to field 
                          
00273    0273     00000 1 EX_IS_newPrio  DS       0              ; INPUT: priority to be inserted 
00274    0274     00000 1 EX_IS_newPrioB DS       0              ; INPUT: nominal priority to be inserted 
00275    0275     00000 1 EX_IS_newLoc   DS       0              ; INPUT: address to be inserted 
00276    0276     00000 1 EX_IS_saveQ    DS       0              ; return address 
00277    0277     00000 1 EX_IS_jobPtr   DS       0              ; points to job rec in list 
00300    0300     00000 1 EX_IS_jobPtr2  DS       0              ; points to job rec ahead of jobPtr 
00301    0301     00000 1 EX_IS_loopCnt  DS       0              ; loop counter 
                          ; INCL dsky_e.asm ; DSKY variables 
                          
                          ; FIXED MEMORY DECLARATIONS 
                          
                                         ORG      EXTENDER       
05777    5777     47777 0                DS       %47777         ; needed for EXTEND 
                          
                          ;-------------------------------------------------------------------------- 
                          ; EXECUTION ENTRY POINTS 
                          ;-------------------------------------------------------------------------- 
                          
                          ; Program (re)start 
                                         ORG      GOPROG         
02000    2000 0  1,2076 1                TC       goMAIN         ; AGC (re)start begins here! 
                          
                          ; Interrupt vectors 
                                         ORG      T3RUPT         
02004    2004 5  0,0026 0                TS       ARUPT          ; TIME3 interrupt vector 
02005    2005 3  0,0001 0                XCH      Q              
02006    2006 5  0,0027 1                TS       QRUPT          
02007    2007 0  1,2034 1                TC       goT3           
                          
                                         ORG      ERRUPT         
02010    2010 5  0,0026 0                TS       ARUPT          
02011    2011 3  0,0001 0                XCH      Q              
02012    2012 5  0,0027 1                TS       QRUPT          
02013    2013 0  1,2035 0                TC       goER           
                          
                                         ORG      DSRUPT         ; T4RUPT for DSKY display 
02014    2014 5  0,0026 0                TS       ARUPT          
02015    2015 3  0,0001 0                XCH      Q              
02016    2016 5  0,0027 1                TS       QRUPT          
02017    2017 0  1,2036 0                TC       goDS           
                          
                                         ORG      KEYRUPT        ; DSKY keyboard interrupt vector 
02020    2020 5  0,0026 0                TS       ARUPT          
02021    2021 3  0,0001 0                XCH      Q              
02022    2022 5  0,0027 1                TS       QRUPT          
02023    2023 0  1,2037 1                TC       goKEY          
                          
                                         ORG      UPRUPT         
02024    2024 5  0,0026 0                TS       ARUPT          
02025    2025 3  0,0001 0                XCH      Q              
02026    2026 5  0,0027 1                TS       QRUPT          
02027    2027 0  1,2040 1                TC       goUP           
                          
                          endRUPT        EQU      *              
02030    2030 3  0,0027 1                XCH      QRUPT          ; restore Q 
02031    2031 5  0,0001 0                TS       Q              
02032    2032 3  0,0026 0                XCH      ARUPT          ; restore A 
02033    2033 2  0,0000 1                RESUME                  ; resume normal program execution 
                          
                          ;-------------------------------------------------------------------------- 
                          ; RUPT (INTERRUPT) SERVICE ROUTINES 
                          ; 
                          ; Upon entry, registers will contain these values: 
                          ; - ZRUPT: Prior contents of program counter (Z register). 
                          ; - BRUPT: Prior contents of B register. 
                          ; - ARUPT: Prior contents of accumulator (A register). 
                          ; - QRUPT: Prior contents of Q register. 
                          ; 
                          ; When the service routine is finished, jump to endRUPT to restore the A 
                          ; and Q registers. Call RESUME to restore Z and B, which causes a return 
                          ; to normal (non-interrupt) execution. Interrupts are disabled upon entry 
                          ; to the service routine; they are reenabled following RESUME. 
                          ;-------------------------------------------------------------------------- 
                          
                          goT3           EQU      *              
02034    2034 0  1,2030 0                TC       endRUPT        
                          
                          goER           EQU      *              
02035    2035 0  1,2030 0                TC       endRUPT        
                          
                          goDS           EQU      *              
02036    2036 0  1,2030 0                TC       endRUPT        
                          
                          goKEY          EQU      *              
02037    2037 0  1,2030 0                TC       endRUPT        
                          
                          goUP           EQU      *              
02040    2040 0  1,2030 0                TC       endRUPT        
                          
                          ;-------------------------------------------------------------------------- 
                          ; FIXED MEMORY CONSTANTS (shared) 
                          ;-------------------------------------------------------------------------- 
                          
02041    2041     00200 0 ofbit          DS       %200           ; OUT1, bit 8 initiates standby 
                          
02042    2042     77777 0 NEG0           DS       -0             
02043    2043     77776 1 NEG1           DS       -1             
02044    2044     77775 1 NEG2           DS       -2             
                          
02045    2045     00000 1 ZERO           DS       0              
02046    2046     00001 0 ONE            DS       1              
02047    2047     00002 0 TWO            DS       2              
02050    2050     00003 1 THREE          DS       3              
02051    2051     00004 0 FOUR           DS       4              
02052    2052     00005 1 FIVE           DS       5              
02053    2053     00006 1 SIX            DS       6              
02054    2054     00007 0 SEVEN          DS       7              
02055    2055     00012 1 TEN            DS       10             
                          
02056    2056     00001 0 BIT1           DS       %00001         
02057    2057     00004 0 BIT3           DS       %00004         
02060    2060     00020 0 BIT5           DS       %00020         
02061    2061     00100 0 BIT7           DS       %00100         
02062    2062     02000 0 BIT11          DS       %02000         
02063    2063     04000 0 BIT12          DS       %04000         
02064    2064     10000 0 BIT13          DS       %10000         
02065    2065     20000 0 BIT14          DS       %20000         
02066    2066     40000 0 BIT15          DS       %40000         
                          
02067    2067     00177 0 LOW7           DS       %00177         
                          
02070    2070     06000 1 bankAddr       DS       %6000          ; fixed-switchable addr range starts here 
02071    2071     01777 1 lowAddr        DS       %1777          ; mask for 10-bit address 
02072    2072     01400 1 OCT1400        DS       %1400          
                          
02073    2073     00013 0 NOUTCON        DS       11             
                          
02074    2074     37777 1 POSMAX         DS       %37777         
                          
                          ;------------------------------------------------------------------------- 
                          ; MAIN PROGRAM 
                          ; 
                          ; AGC starts executing here, following power-up, or restart. 
                          ;------------------------------------------------------------------------- 
                          
02075    2075     02661 1 THE_CADR       DS       job3           
                          
                          goMAIN         EQU      *              
02076    2076 2  0,0000 0                INHINT                  ; inhibit interrupts 
                          
                          ; First, check for standby operation. 
                          
02077    2077 3  1,2041 0                XCH      ofbit          
02100    2100 5  0,0011 1                TS       OUT1           
                          
                          ; Initialize WAITLIST and EXEC eraseable memory. 
                          
02101    2101 0  1,2420 0                TCR      EX_initEX      ; initialize EXEC 
                          
                          ; Start any jobs or tasks needed at AGC initialization. 
02102    2102 3  1,2656 0                XCH      prio1          ; job priority 
02103    2103 0  1,2347 0                TC       EX_addJob      
02104    2104     22000 1                DS       job1           ; 14 bit job address 
                          
02105    2105 3  1,2657 1                XCH      prio2          ; job priority 
02106    2106 0  1,2347 0                TC       EX_addJob      
02107    2107     24000 1                DS       job2           ; 14 bit job address 
                          
02110    2110 3  1,2660 0                XCH      prio3          ; job priority 
02111    2111 0  1,2347 0                TC       EX_addJob      
02112    2112     02661 1                DS       job3           ; 14 bit job address 
                          
                          
                          ; Start the EXEC. 
                          
02113    2113 0  1,2130 1                TC       EX_exec        ; never returns 
                          
                          ;-------------------------------------------------------------------------- 
                          ; Mimic the bank assignments in COLOSSUS. Since this is a block I AGC that 
                          ; has fewer banks, different bank numbers are used, but the sequence and 
                          ; relative allocation of routines to various banks is preserved. 
                          
                          ; library stuff in fixed-fixed. 
                          
                                         INCL     exec_f.asm     ; EXEC 
                          ;========================================================================== 
                          ; EXEC fixed (source code) memory segment (file:exec_f.asm) 
                          ; 
                          ; Version: 1.0 
                          ; Author: John Pultorak 
                          ; Date: 04/26/2002 
                          ; 
                          ; PURPOSE: 
                          ; Constants and source code for EXEC. 
                          ; 
                          ; Non-preemptive multitasking routines, originally implemented by J. H. 
                          ; Laning, Jr. for AGC3 and later adapted for AGC4. Briefly discussed in 
                          ; R-393, which gives some of the software interfaces into the 
                          ; multitasking. This is my own recreation, and it only includes the job 
                          ; scheduling. The original EXEC also includes memory management for the 
                          ; eraseable memory; this is not reproduced here. 
                          ; 
                          ; Overview: scheduled elements are called 'jobs'. Up to 7 jobs can be 
                          ; concurrently scheduled. An 8th 'dummy' job is always scheduled. Each 
                          ; job has an assigned priority (1-n, where 1 is the lowest priority). 
                          ; The highest priority job always executes. When that job terminates, 
                          ; the next highest priority job is selected for execution. If several 
                          ; jobs have the same priority, they are executed round-robin. 
                          ; 
                          ; A job is scheduled for execution by calling 'EX_addJob' and 
                          ; furnishing the job priority and starting address. 
                          ; L XCH JOB_PRIORITY 
                          ; L+1 TC EX_addJob 
                          ; L+2 DS JOB_ADDRESS 
                          ; L+3 ... execution resumes here 
                          ; 
                          ; JOB_PRIORITY = a positive integer from 1 - n where a higher number 
                          ; indicates higher priority. 
                          ; JOB_ADDRESS = starting address of the job. 
                          ; 
                          ; Jobs terminate themselves by jumping to ENDOFJOB. This removes them 
                          ; from the EXEC scheduler: 
                          ; TC ENDOFJOB 
                          ; 
                          ; Jobs can suspend themselves (yield to a higher priority job) by 
                          ; executing the following sequence. If there is no other job of 
                          ; higher priority, executing of the yielded job resumes at L+2 
                          ; L CCS newJob 
                          ; L+1 TC CHANG1 
                          ; L+2 ... execution resumes here 
                          ; 
                          ; If there is no other job of equal or higher priority, the branch is 
                          ; not taken. 
                          ; 
                          ; Jobs can put themselves to sleep by calling JOBSLEEP. The address 
                          ; where execution of the sleeping job should resume must be in register 
                          ; A before calling JOBSLEEP. The job will remain sleeping until JOBWAKE 
                          ; is called: 
                          ; 
                          ; L CAF WAKECADR 
                          ; L+1 TC JOBSLEEP 
                          ; (does not return from JOBSLEEP) 
                          ; 
                          ; Sleeping jobs are awakened by calling JOBWAKE. The address where 
                          ; execution of the sleeping job should resume must be in register A. 
                          ; JOBWAKE returns to the address after the call and execution continues 
                          ; for the calling job. The job that was sleeping will now be the next 
                          ; job to execute. 
                          ; 
                          ; L CAF WAKECADR 
                          ; L+1 TC JOBWAKE 
                          ; L+2 ... execution continues here 
                          ; 
                          ;========================================================================== 
                          
02114    2114     37777 1 EX_WAKE_PRIO   DS       %37777         ; top priority 
02115    2115     00002 0 EX_DUMMY_PRIO  DS       %00002         ; dummy job priority (lowest runnable) 
02116    2116     00001 0 EX_SLEEP_PRIO  DS       %00001         ; sleeping job; must be < dummy 
                          
02117    2117     00057 0 EX_jobCurStart DS       EX_currentJob  ; starting address for current job 
                          
02120    2120     00015 0 EX_jobRecSize  DS       JRECSZ         ; size of a job record (words) 
02121    2121     00227 0 EX_jobLstStart DS       EX_jobList     ; starting address for jobList 
02122    2122     00236 0 EX_jobLstEnd   DS       MAXJOBS+EX_jobList 
02123    2123     00235 0 EX_jobLstEnd1  DS       MAXJOBS-1+EX_jobList 
02124    2124     00006 1 EX_numJobs     DS       MAXJOBS-1      ; init loop counter for all jobs 
02125    2125     00005 1 EX_numJobs1    DS       MAXJOBS-2      ; init loop counter for all jobs - 1 
                          
                          ; enumerated types for setting change flag: 
02126    2126     00001 0 EX_changeJob   DS       CHGJOB         ; change job 
02127    2127     00000 1 EX_keepJob     DS       KEEPJOB        ; keep job 
                          
                          
                          ;-------------------------------------------------------------------------- 
                          ; EX_exec -- EXEC SCHEDULER 
                          ; 
                          ; Executes the highest priority job. Enables interrupts while the job is 
                          ; running. Once called, this function never returns. 
                          ;-------------------------------------------------------------------------- 
                          
                          EX_exec        EQU      *              ; entry point 
                          
                          ; Add a dummy job (lowest priority) that never terminates. 
                          
02130    2130 3  1,2115 0                CAF      EX_DUMMY_PRIO  ; job priority 
02131    2131 0  1,2347 0                TC       EX_addJob      
02132    2132     02653 0                DS       dumJob         ; 14 bit job address 
02133    2133 2  0,0000 0                INHINT                  ; inhibit RUPTs enab by addJob 
                          
                          ; Get the next job to run. 
                          
                          EX_MN_findJob  EQU      *              
02134    2134 0  1,2556 0                TCR      EX_remove      
                          
                          ; compare priority of current job to priority of next waiting job. 
                          ; If next job has same priority as current job, set the newJob 
                          ; flag so they will be scheduled round-robin. 
                          
02135    2135 4  0,0072 0                CS       PRIORITY       ; get priority of current job 
                          
02136    2136 2  1,2121 0                INDEX    EX_jobLstStart 
02137    2137 2  0,0000 0                INDEX    0              
02140    2140 6  0,0072 1                AD       PRIORITY       ; compare with priority of next job 
                          
02141    2141 1  0,0000 0                CCS      A              ; next job has equal priority? 
02142    2142 0  1,2151 0                TC       EX_MN_setFlg   ; >0 (error!) 
02143    2143 0  1,2151 0                TC       EX_MN_setFlg   ; +0 yes, set flag 
02144    2144 0  1,2146 0                TC       *+2            ; <0 no, clear flag 
02145    2145 0  1,2151 0                TC       EX_MN_setFlg   ; -0 yes, set flag 
                          
02146    2146 3  1,2127 1                CAF      EX_keepJob     ; clear change flag 
02147    2147 5  0,0236 0                TS       newJob         
02150    2150 0  1,2153 1                TC       EX_MN_runJob   
                          
                          EX_MN_setFlg   EQU      *              
02151    2151 3  1,2126 0                CAF      EX_changeJob   ; set change flag 
02152    2152 5  0,0236 0                TS       newJob         
                          
                          
                          ; Start the job. Interrupts are reenabled before 'EX_curJobPtr' is 
                          ; referenced, but the interrupts can only call 'EX_addJob' which does 
                          ; not change 'EX_curJobPtr'. 
                          
                          ; The job address is always 14-bit, so check whether the address falls 
                          ; within erasable or fixed-fixed memory. If so, use it as-is; otherwise, 
                          ; set the bank register and change the address to 12-bit. 
                          
                          EX_MN_runJob   EQU      *              
02153    2153 3  1,2045 1                CAF      ZERO           
02154    2154 6  0,0067 0                AD       LOC            
02155    2155 5  0,0260 0                TS       EX_MN_runAddr  ; save job's 14 bit address 
                          
02156    2156 4  0,0000 0                COM                     
02157    2157 6  1,2070 1                AD       bankAddr       ; -(14bitAddr)+%6000 
02160    2160 1  0,0000 0                CCS      A              ; job is bank addressed? 
02161    2161 0  1,2172 1                TC       EX_MN_runIt    ; >0 no, just run it, as is 
02162    2162 0  1,2164 0                TC       *+2            ; +0 yes 
02163    2163 0  1,2164 0                TC       *+1            ; <0 yes 
                          
02164    2164 3  1,2045 1                CAF      ZERO           
02165    2165 6  0,0260 0                AD       EX_MN_runAddr  
02166    2166 5  0,0015 0                TS       BANK           ; set the bank 
                          
02167    2167 7  1,2071 1                MASK     lowAddr        ; get lowest 10-bits of address 
02170    2170 6  1,2070 1                AD       bankAddr       ; set bits 11,12 for fixed-switchable 
02171    2171 5  0,0260 0                TS       EX_MN_runAddr  
                          
                          EX_MN_runIt    EQU      *              
02172    2172 2  0,0000 1                RELINT                  ; enable interrupts 
02173    2173 2  0,0260 1                INDEX    EX_MN_runAddr  ; apply indirect address to next instr. 
02174    2174 0  0,0000 1                TC       0              ; run the job 
                          
                          ; Job is terminated. Delete the job record. 
                          
                          ENDOFJOB       EQU      *              
02175    2175 2  0,0000 0                INHINT                  ; inhibit interrupts 
02176    2176 0  1,2134 0                TC       EX_MN_findJob  ; get next job 
                          
                          ; job is sleeping. Keep the job record, but drop the priority so it 
                          ; is below the priority of the dummy job. This will keep the job 
                          ; from running until JOBWAKE is called. The address where it should 
                          ; resume running when awoken is in register A. 
                          
                          JOBSLEEP       EQU      *              
02177    2177 2  0,0000 0                INHINT                  ; inhibit interrupts 
02200    2200 5  0,0067 0                TS       LOC            ; save restart address 
                          
02201    2201 3  1,2116 0                CAF      EX_SLEEP_PRIO  
02202    2202 5  0,0072 1                TS       PRIORITY       ; set sleeping priority 
02203    2203 5  0,0273 1                TS       EX_IS_newPrio  
                          
02204    2204 0  1,2231 0                TC       EX_MN_mvRec    ; finish up 
                          
                          
                          ; Job is suspended. Keep the job record, but update the address, so 
                          ; execution will resume at the point after suspension. 
                          
                          CHANG1         EQU      *              
02205    2205 2  0,0000 0                INHINT                  ; inhibit interrupts 
02206    2206 3  0,0001 0                XCH      Q              
02207    2207 5  0,0260 0                TS       EX_MN_runAddr  ; save job's 14 bit restart address 
                          
02210    2210 4  0,0000 0                COM                     
02211    2211 6  1,2070 1                AD       bankAddr       ; -(14bitAddr)+%6000 
02212    2212 1  0,0000 0                CCS      A              ; job is bank addressed? 
02213    2213 0  1,2222 1                TC       EX_MN_notBank  ; >0 no, just save it, as is 
02214    2214 0  1,2216 0                TC       *+2            ; +0 yes 
02215    2215 0  1,2216 0                TC       *+1            ; <0 yes 
                          
02216    2216 4  1,2070 0                CS       bankAddr       ; 12bitAddr - %6000 
02217    2217 6  0,0260 0                AD       EX_MN_runAddr  
02220    2220 6  0,0015 0                AD       BANK           ; make it a 14-bit address 
02221    2221 0  1,2224 1                TC       EX_MN_saveIt   
                          
                          EX_MN_notBank  EQU      *              
02222    2222 3  1,2045 1                CAF      ZERO           
02223    2223 6  0,0260 0                AD       EX_MN_runAddr  ; get restart address 
                          
                          EX_MN_saveIt   EQU      *              
02224    2224 5  0,0067 0                TS       LOC            ; save job's new starting address 
                          
02225    2225 3  1,2045 1                CAF      ZERO           
02226    2226 6  0,0073 0                AD       JOBPRIOBASE    
02227    2227 5  0,0072 1                TS       PRIORITY       
02230    2230 5  0,0273 1                TS       EX_IS_newPrio  ; restore job priority to nominal value 
                          
                          ; given the priority, find the insertion point in the list. Copy 
                          ; the current job into the list at the correct insertion point. 
                          
                          EX_MN_mvRec    EQU      *              
02231    2231 0  1,2500 0                TCR      EX_findIns     
02232    2232 5  0,0277 0                TS       EX_IS_jobPtr   ; save address of insertion point 
                          
                          ; copy all fields in current record to list 
                          
02233    2233 3  1,2120 0                XCH      EX_jobRecSize  
02234    2234 5  0,0261 1                TS       EX_MN_field    
                          
                          EX_MN_loop3    EQU      *              
02235    2235 1  0,0261 0                CCS      EX_MN_field    ; done? 
02236    2236 0  1,2240 0                TC       *+2            ; not yet 
02237    2237 0  1,2254 0                TC       EX_MN_done3    ; yes 
02240    2240 5  0,0261 1                TS       EX_MN_field    
                          
                          ; copy this field to list 
                          
02241    2241 3  1,2045 1                CAF      ZERO           
02242    2242 2  0,0277 1                INDEX    EX_IS_jobPtr   
02243    2243 6  0,0000 1                AD       0              ; get index to record in list 
02244    2244 6  0,0261 1                AD       EX_MN_field    ; add field displacement 
02245    2245 5  0,0262 1                TS       EX_MN_findx    ; save index to field in list 
                          
02246    2246 3  1,2045 1                CAF      ZERO           
02247    2247 2  0,0261 0                INDEX    EX_MN_field    
02250    2250 6  0,0057 0                AD       EX_currentJob  ; get field from current job 
02251    2251 2  0,0262 0                INDEX    EX_MN_findx    
02252    2252 5  0,0057 0                TS       EX_currentJob  ; copy field to list 
                          
02253    2253 0  1,2235 1                TC       EX_MN_loop3    
                          
                          EX_MN_done3    EQU      *              
02254    2254 0  1,2134 0                TC       EX_MN_findJob  ; get next job 
                          
                          
                          ;-------------------------------------------------------------------------- 
                          ; JOBWAKE - wake up the job identified by address in register A 
                          ; 
                          ; Search jobList for a job with address matching the address in A. 
                          ; If found, bump the priority up to the highest level, so the job 
                          ; will be the next to run. 
                          ; 
                          ; This is a 'public' function. It assumes that interrupts are already 
                          ; disabled before it is called. Disabling interrupts during JOBWAKE 
                          ; is necessary to preserve the integrity of the joblist. 
                          ;-------------------------------------------------------------------------- 
                          
                          JOBWAKE        EQU      *              
02255    2255 5  0,0241 0                TS       EX_JW_CADR     ; save job address 
02256    2256 3  0,0001 0                XCH      Q              
02257    2257 5  0,0237 1                TS       EX_JW_saveQ    ; save return address 
                          
                          ; Search the joblist for the job to wake (job address matches 
                          ; EX_JW_CADR). 
                          
02260    2260 3  1,2045 1                CAF      ZERO           
02261    2261 5  0,0242 0                TS       EX_JW_foundit  ; clear 'found it' flag 
                          
02262    2262 3  1,2123 0                CAF      EX_jobLstEnd1  ; set pointer to back of list 
02263    2263 5  0,0243 1                TS       EX_JW_jobPtr   
                          
02264    2264 6  1,2043 1                AD       NEG1           ; set pointer to rec in front of it 
02265    2265 5  0,0244 0                TS       EX_JW_jobPtr2  
                          
02266    2266 3  1,2125 0                CAF      EX_numJobs1    ; loop for number of jobs minus 1 
                          EX_JW_loop     EQU      *              
02267    2267 5  0,0240 1                TS       EX_JW_loopCnt  
                          
                          ; if foundit=0, job has not been found yet. Keep searching toward 
                          ; the front of the list. 
                          ; if foundit=1, the job has been found and removed from the list. 
                          ; push all jobs in front of the removed job one step to the back 
                          ; to fill in the gap and to make room at the front of the list 
                          ; for the awoken job. 
                          
02270    2270 1  0,0242 1                CCS      EX_JW_foundit  ; already found job to wake? 
02271    2271 0  1,2307 1                TC       EX_JW_moveRec  ; >0, yes 
                          
                          ; Is this the job? 
                          
02272    2272 4  0,0241 1                CS       EX_JW_CADR     
02273    2273 2  0,0243 0                INDEX    EX_JW_jobPtr   
02274    2274 2  0,0000 0                INDEX    0              
02275    2275 6  0,0067 0                AD       LOC            
02276    2276 1  0,0000 0                CCS      A              ; found job to wake? 
02277    2277 0  1,2313 1                TC       EX_JW_bumpPtr  ; >0, no 
02300    2300 0  1,2302 1                TC       *+2            ; +0, yes 
02301    2301 0  1,2313 1                TC       EX_JW_bumpPtr  ; <0, no 
                          
                          ; found the job to wake. 
                          
02302    2302 3  1,2046 1                CAF      ONE            
02303    2303 5  0,0242 0                TS       EX_JW_foundit  ; set 'found it' flag 
                          
                          ; save record index for awoken job 
                          
02304    2304 2  0,0243 0                INDEX    EX_JW_jobPtr   
02305    2305 3  0,0000 1                XCH      0              
02306    2306 5  0,0245 1                TS       EX_JW_fndIndx  ; index for awoken job 
                          
                          ; bump prior record back 
                          
                          EX_JW_moveRec  EQU      *              
02307    2307 2  0,0244 1                INDEX    EX_JW_jobPtr2  
02310    2310 3  0,0000 1                XCH      0              
02311    2311 2  0,0243 0                INDEX    EX_JW_jobPtr   
02312    2312 3  0,0000 1                XCH      0              
                          
                          EX_JW_bumpPtr  EQU      *              
02313    2313 3  0,0243 1                XCH      EX_JW_jobPtr   ; bump job pointer forward 1 record 
02314    2314 6  1,2043 1                AD       NEG1           
02315    2315 5  0,0243 1                TS       EX_JW_jobPtr   
                          
02316    2316 6  1,2043 1                AD       NEG1           ; set pointer to record in front of it 
02317    2317 5  0,0244 0                TS       EX_JW_jobPtr2  
                          
02320    2320 1  0,0240 0                CCS      EX_JW_loopCnt  ; done bumping jobs backward? 
02321    2321 0  1,2267 0                TC       EX_JW_loop     ; not yet 
                          
02322    2322 1  0,0242 1                CCS      EX_JW_foundit  ; found job to wake? 
02323    2323 0  1,2325 1                TC       *+2            ; >0, yes 
02324    2324 0  1,2330 0                TC       EX_JW_done     ; no 
                          
02325    2325 3  0,0245 1                XCH      EX_JW_fndIndx  ; put awoken job on front of list 
02326    2326 2  1,2121 0                INDEX    EX_jobLstStart 
02327    2327 5  0,0000 1                TS       0              
                          
                          EX_JW_done     EQU      *              
                          
                          ; Is the awoken job at the front of the list? 
                          ; (If it was already there before we started searching, 'foundIt' 
                          ; will be false (0) so we need to make this test). 
                          
02330    2330 4  0,0241 1                CS       EX_JW_CADR     
02331    2331 2  1,2121 0                INDEX    EX_jobLstStart 
02332    2332 2  0,0000 0                INDEX    0              
02333    2333 6  0,0067 0                AD       LOC            
02334    2334 1  0,0000 0                CCS      A              ; woken job at front of list? 
02335    2335 0  1,2346 1                TC       EX_JW_return   ; >0, no 
02336    2336 0  1,2340 1                TC       *+2            ; +0, yes 
02337    2337 0  1,2346 1                TC       EX_JW_return   ; <0, no 
                          
                          ; set awoken priority and change job flag 
                          
02340    2340 3  1,2114 1                CAF      EX_WAKE_PRIO   
02341    2341 2  1,2121 0                INDEX    EX_jobLstStart 
02342    2342 2  0,0000 0                INDEX    0              
02343    2343 5  0,0072 1                TS       PRIORITY       ; set waking priority 
                          
02344    2344 3  1,2126 0                CAF      EX_changeJob   ; set the change flag 
02345    2345 5  0,0236 0                TS       newJob         
                          
                          EX_JW_return   EQU      *              
02346    2346 0  0,0237 1                TC       EX_JW_saveQ    ; return 
                          
                          
                          ;-------------------------------------------------------------------------- 
                          ; EX_addJob - ADD A JOB TO THE JOBLIST 
                          ; 
                          ; Search jobList for an empty slot. If found, put the new job in the 
                          ; empty slot. If the new job has the same, or higher, priority than the 
                          ; current job, set the change flag to 'CHGJOB' (change jobs at the next 
                          ; opportunity). 
                          ; 
                          ; This is a 'public' function. It can be called from a job 
                          ; or from an interrupt. It disables interrupts to maintain the 
                          ; integrity of the jobList. 
                          ;-------------------------------------------------------------------------- 
                          
                          EX_addJob      EQU      *              
02347    2347 2  0,0000 0                INHINT                  ; disable interrupts 
02350    2350 5  0,0250 0                TS       EX_AJ_jobPrio  ; save job priority 
02351    2351 3  0,0001 0                XCH      Q              
02352    2352 5  0,0246 1                TS       EX_AJ_saveQ    ; save return address-1 
                          
                          
                          ; add new job to end of list 
                          
02353    2353 3  1,2045 1                CAF      ZERO           
02354    2354 6  0,0250 0                AD       EX_AJ_jobPrio  
02355    2355 5  0,0273 1                TS       EX_IS_newPrio  
02356    2356 5  0,0274 0                TS       EX_IS_newPrioB ; store new job priority 
                          
02357    2357 2  0,0246 0                INDEX    EX_AJ_saveQ    ; indirectly address addJobQ 
02360    2360 3  0,0000 1                CAF      0              
02361    2361 5  0,0275 1                TS       EX_IS_newLoc   ; store new job address 
                          
02362    2362 0  1,2500 0                TCR      EX_findIns     ; find insertion point in list 
02363    2363 5  0,0277 0                TS       EX_IS_jobPtr   ; save address of insertion point 
                          
                          ; Initialize relevant fields in new job. The remaining fields 
                          ; should already be zeroed. 
                          
02364    2364 3  1,2045 1                CAF      ZERO           
02365    2365 6  0,0273 1                AD       EX_IS_newPrio  
02366    2366 2  0,0277 1                INDEX    EX_IS_jobPtr   
02367    2367 2  0,0000 0                INDEX    0              
02370    2370 5  0,0072 1                TS       PRIORITY       ; set priority field 
                          
02371    2371 3  1,2045 1                CAF      ZERO           
02372    2372 6  0,0274 0                AD       EX_IS_newPrioB 
02373    2373 2  0,0277 1                INDEX    EX_IS_jobPtr   
02374    2374 2  0,0000 0                INDEX    0              
02375    2375 5  0,0073 0                TS       JOBPRIOBASE    ; set nominal priority field 
                          
02376    2376 3  1,2045 1                CAF      ZERO           
02377    2377 6  0,0275 1                AD       EX_IS_newLoc   
02400    2400 2  0,0277 1                INDEX    EX_IS_jobPtr   
02401    2401 2  0,0000 0                INDEX    0              
02402    2402 5  0,0067 0                TS       LOC            ; set address field 
                          
                          
                          ; Set changeflag if priority of new job >= priority of current job 
                          
                          EX_AJ_testFlg  EQU      *              
02403    2403 4  0,0072 0                CS       PRIORITY       ; get -priority of current job 
                          
02404    2404 6  0,0250 0                AD       EX_AJ_jobPrio  ; add positive priority of new job 
02405    2405 1  0,0000 0                CCS      A              ; new job is highest priority? 
02406    2406 0  1,2411 1                TC       *+3            ; >0, yes 
02407    2407 0  1,2411 1                TC       *+2            ; +0, yes 
02410    2410 0  1,2413 0                TC       EX_AJ_done     ; <0, no, current job is higher priority 
                          
02411    2411 3  1,2126 0                CAF      EX_changeJob   ; set the change flag 
02412    2412 5  0,0236 0                TS       newJob         
                          
                          EX_AJ_done     EQU      *              
02413    2413 3  0,0246 1                XCH      EX_AJ_saveQ    
02414    2414 6  1,2046 1                AD       ONE            
02415    2415 5  0,0001 0                TS       Q              
02416    2416 2  0,0000 1                RELINT                  ; enable interrupts 
02417    2417 0  0,0000 0                RETURN                  
                          
                          
                          ;-------------------------------------------------------------------------- 
                          ; EX_initEX - INITIALIZE EXEC 
                          ; 
                          ; Initialize the eraseable memory segment for EXEC. Necessary in 
                          ; case the AGC is restarted. 
                          ;-------------------------------------------------------------------------- 
                          
                          EX_initEX      EQU      *              
02420    2420 3  0,0001 0                XCH      Q              
02421    2421 5  0,0252 1                TS       EX_IN_saveQ    ; save return address 
                          
02422    2422 3  1,2127 1                CAF      EX_keepJob     ; clear change flag 
02423    2423 5  0,0236 0                TS       newJob         
                          
02424    2424 3  1,2045 1                CAF      ZERO           
02425    2425 5  0,0072 1                TS       PRIORITY       ; set current job record to NIL 
                          
                          ; Iterate through jobList, initialize each element on the list so it 
                          ; points to its own job record. 
                          
02426    2426 3  1,2121 1                CAF      EX_jobLstStart ; init pointer to start of list 
02427    2427 5  0,0254 1                TS       EX_IN_jobPtr   
                          
02430    2430 3  1,2045 1                CAF      ZERO           
02431    2431 6  1,2120 0                AD       EX_jobRecSize  
02432    2432 5  0,0255 0                TS       EX_IN_recIndex 
                          
02433    2433 3  1,2124 1                CAF      EX_numJobs     ; loop for number of jobs 
                          EX_IN_loop1    EQU      *              
02434    2434 5  0,0253 0                TS       EX_IN_loopCnt  
                          
02435    2435 3  0,0255 0                XCH      EX_IN_recIndex 
02436    2436 2  0,0254 0                INDEX    EX_IN_jobPtr   
02437    2437 5  0,0000 1                TS       0              ; initialize record index 
02440    2440 6  1,2120 0                AD       EX_jobRecSize  
02441    2441 5  0,0255 0                TS       EX_IN_recIndex ; bump index to next record 
                          
02442    2442 3  0,0254 1                XCH      EX_IN_jobPtr   ; bump job pointer back 1 record 
02443    2443 6  1,2046 1                AD       ONE            
02444    2444 5  0,0254 1                TS       EX_IN_jobPtr   
                          
02445    2445 1  0,0253 1                CCS      EX_IN_loopCnt  ; done clearing jobList? 
02446    2446 0  1,2434 0                TC       EX_IN_loop1    ; not yet 
                          
                          
                          ; Iterate through job records, initialize each field to zero. 
                          
02447    2447 3  1,2121 1                CAF      EX_jobLstStart ; init pointer to start of list 
02450    2450 5  0,0254 1                TS       EX_IN_jobPtr   
                          
02451    2451 3  1,2124 1                CAF      EX_numJobs     ; loop for number of jobs 
                          EX_IN_loop2    EQU      *              
02452    2452 5  0,0253 0                TS       EX_IN_loopCnt  
                          
                          ; loop for number of fields in each record 
                          
02453    2453 3  1,2120 0                XCH      EX_jobRecSize  
02454    2454 5  0,0256 0                TS       EX_IN_field    
                          
                          EX_IN_loop3    EQU      *              
02455    2455 1  0,0256 1                CCS      EX_IN_field    ; done? 
02456    2456 0  1,2460 1                TC       *+2            ; not yet 
02457    2457 0  1,2472 1                TC       EX_IN_done     ; yes 
02460    2460 5  0,0256 0                TS       EX_IN_field    
                          
                          ; set the field to zero 
                          
02461    2461 3  1,2045 1                CAF      ZERO           
02462    2462 2  0,0254 0                INDEX    EX_IN_jobPtr   
02463    2463 6  0,0000 1                AD       0              ; get index to record 
02464    2464 6  0,0256 0                AD       EX_IN_field    ; add field displacement 
02465    2465 5  0,0257 1                TS       EX_IN_findx    ; save index to field 
02466    2466 3  1,2045 1                CAF      ZERO           
02467    2467 2  0,0257 0                INDEX    EX_IN_findx    
02470    2470 5  0,0057 0                TS       EX_currentJob  ; clear field 
                          
02471    2471 0  1,2455 1                TC       EX_IN_loop3    
                          
                          ; done clearing all fields in record, so do next record 
                          
                          EX_IN_done     EQU      *              
02472    2472 3  0,0254 1                XCH      EX_IN_jobPtr   ; bump job pointer back 1 record 
02473    2473 6  1,2046 1                AD       ONE            
02474    2474 5  0,0254 1                TS       EX_IN_jobPtr   
                          
02475    2475 1  0,0253 1                CCS      EX_IN_loopCnt  ; done clearing jobList? 
02476    2476 0  1,2452 0                TC       EX_IN_loop2    ; not yet 
                          
02477    2477 0  0,0252 1                TC       EX_IN_saveQ    ; return 
                          
                          
                          ;-------------------------------------------------------------------------- 
                          ; EX_findIns - FIND INSERTION POINT INTO SORTED LIST 
                          ; 
                          ; Insert a job record into the sorted list. Use 'EX_IS_newPrio', 
                          ; EX_IS_newPrioB and 'EX_IS_newLoc' to set the fields of record to 
                          ; be inserted. 
                          ; Performs an insertion sort, with the records sorted by priority. 
                          ; Highest priority is at the front of the list. If several records 
                          ; have the same priority, the records inserted first will appear first 
                          ; in the list. NIL records have a priority of zero. 
                          ;-------------------------------------------------------------------------- 
                          
                          EX_findIns     EQU      *              
02500    2500 3  0,0001 0                XCH      Q              
02501    2501 5  0,0276 1                TS       EX_IS_saveQ    ; save return address 
                          
02502    2502 3  1,2123 0                CAF      EX_jobLstEnd1  ; set pointer to back of list 
02503    2503 5  0,0277 0                TS       EX_IS_jobPtr   
                          
02504    2504 6  1,2043 1                AD       NEG1           ; set pointer to rec in front of it 
02505    2505 5  0,0300 1                TS       EX_IS_jobPtr2  
                          
02506    2506 3  1,2045 1                CAF      ZERO           
02507    2507 2  0,0277 1                INDEX    EX_IS_jobPtr   
02510    2510 2  0,0000 0                INDEX    0              
02511    2511 6  0,0072 1                AD       PRIORITY       ; check last record on list 
                          
02512    2512 1  0,0000 0                CCS      A              ; list full? 
02513    2513 0  1,2553 0                TC       EX_FI_done     ; >0 yes 
                          
                          ; Work from the back of the list to the front, pushing each record 
                          ; to the back until the insertion point is found. 
                          
02514    2514 3  1,2125 0                CAF      EX_numJobs1    ; loop for number of jobs minus 1 
                          EX_FI_loop     EQU      *              
02515    2515 5  0,0301 0                TS       EX_IS_loopCnt  
                          
02516    2516 3  1,2045 1                CAF      ZERO           
02517    2517 2  0,0300 0                INDEX    EX_IS_jobPtr2  
02520    2520 2  0,0000 0                INDEX    0              
02521    2521 6  0,0072 1                AD       PRIORITY       
02522    2522 1  0,0000 0                CCS      A              ; previous record is NIL? 
02523    2523 0  1,2525 1                TC       *+2            ; no, so check it 
02524    2524 0  1,2544 0                TC       EX_FI_bumpPtr  ; yes, so skip to next record 
                          
                          
                          ; Is this the insertion point? 
                          
02525    2525 4  0,0273 0                CS       EX_IS_newPrio  
02526    2526 2  0,0300 0                INDEX    EX_IS_jobPtr2  
02527    2527 2  0,0000 0                INDEX    0              
02530    2530 6  0,0072 1                AD       PRIORITY       
02531    2531 1  0,0000 0                CCS      A              ; found insertion point? 
02532    2532 0  1,2553 0                TC       EX_FI_insRec   ; >0 yes 
02533    2533 0  1,2553 0                TC       EX_FI_insRec   ; +0 yes 
02534    2534 0  1,2536 0                TC       *+2            ; <0 no, keep checking 
02535    2535 0  1,2553 0                TC       EX_FI_insRec   ; -0 yes 
                          
                          ; No, bump the record toward the back of the list. 
                          
02536    2536 2  0,0300 0                INDEX    EX_IS_jobPtr2  
02537    2537 3  0,0000 1                XCH      0              
02540    2540 2  0,0277 1                INDEX    EX_IS_jobPtr   
02541    2541 3  0,0000 1                XCH      0              
02542    2542 2  0,0300 0                INDEX    EX_IS_jobPtr2  
02543    2543 3  0,0000 1                XCH      0              
                          
                          EX_FI_bumpPtr  EQU      *              
02544    2544 3  0,0277 0                XCH      EX_IS_jobPtr   ; bump job pointer forward 1 record 
02545    2545 6  1,2043 1                AD       NEG1           
02546    2546 5  0,0277 0                TS       EX_IS_jobPtr   
                          
02547    2547 6  1,2043 1                AD       NEG1           ; set pointer to record in front of it 
02550    2550 5  0,0300 1                TS       EX_IS_jobPtr2  
                          
02551    2551 1  0,0301 1                CCS      EX_IS_loopCnt  ; done bumping jobs backward? 
02552    2552 0  1,2515 1                TC       EX_FI_loop     ; not yet 
                          
                          ; New record should be inserted at EX_IS_jobPtr. 
                          
                          EX_FI_insRec   EQU      *              
                          
                          EX_FI_done     EQU      *              
02553    2553 3  1,2045 1                CAF      ZERO           
02554    2554 6  0,0277 0                AD       EX_IS_jobPtr   ; get insertion spot in list 
02555    2555 0  0,0276 1                TC       EX_IS_saveQ    ; return 
                          
                          
                          ;-------------------------------------------------------------------------- 
                          ; EX_remove - REMOVE JOB FROM FRONT OF LIST 
                          ; 
                          ; Remove job from front of list and copy it to the current job. Bubble 
                          ; any remaining jobs toward the front of the list. 
                          ;-------------------------------------------------------------------------- 
                          
                          EX_remove      EQU      *              
02556    2556 3  0,0001 0                XCH      Q              
02557    2557 5  0,0263 0                TS       EX_RM_saveQ    ; save return address 
                          
02560    2560 3  1,2121 1                CAF      EX_jobLstStart ; set pointer to front of list 
02561    2561 5  0,0264 1                TS       EX_RM_jobPtr   
                          
02562    2562 6  1,2046 1                AD       ONE            ; set pointer to next rec behind it 
02563    2563 5  0,0265 0                TS       EX_RM_jobPtr2  
                          
                          ; Dequeue the record at the top of the list (the next job to run). 
                          ; Make it the current job by copying it to the current job record. 
                          
02564    2564 3  1,2120 0                XCH      EX_jobRecSize  
02565    2565 5  0,0271 0                TS       EX_RM_field    
                          
                          EX_RM_loop1    EQU      *              
02566    2566 1  0,0271 1                CCS      EX_RM_field    ; done? 
02567    2567 0  1,2571 0                TC       *+2            ; not yet 
02570    2570 0  1,2605 0                TC       EX_RM_done1    ; yes 
02571    2571 5  0,0271 0                TS       EX_RM_field    
                          
                          ; set this field to zero 
                          
02572    2572 3  1,2045 1                CAF      ZERO           
02573    2573 2  0,0264 0                INDEX    EX_RM_jobPtr   
02574    2574 6  0,0000 1                AD       0              ; get index to record 
02575    2575 6  0,0271 0                AD       EX_RM_field    ; add field displacement 
02576    2576 5  0,0272 0                TS       EX_RM_findx    ; save index to field 
02577    2577 3  1,2045 1                CAF      ZERO           
02600    2600 2  0,0272 1                INDEX    EX_RM_findx    
02601    2601 6  0,0057 0                AD       EX_currentJob  ; get field 
02602    2602 2  0,0271 1                INDEX    EX_RM_field    
02603    2603 5  0,0057 0                TS       EX_currentJob  ; move to current job 
                          
02604    2604 0  1,2566 0                TC       EX_RM_loop1    
                          
                          EX_RM_done1    EQU      *              
02605    2605 2  0,0264 0                INDEX    EX_RM_jobPtr   
02606    2606 3  0,0000 1                XCH      0              
02607    2607 5  0,0266 0                TS       EX_RM_savePtr  ; so we can move it to the end later 
                          
                          
                          ; Loop through the remaining records in the job list and 
                          ; bubble them up to the front. 
                          
02610    2610 3  1,2125 0                CAF      EX_numJobs1    ; loop for number of jobs minus 1 
                          EX_RM_loop2    EQU      *              
02611    2611 5  0,0267 1                TS       EX_RM_loopCnt  
                          
                          
02612    2612 2  0,0265 1                INDEX    EX_RM_jobPtr2  
02613    2613 3  0,0000 1                XCH      0              
02614    2614 2  0,0264 0                INDEX    EX_RM_jobPtr   
02615    2615 5  0,0000 1                TS       0              
                          
02616    2616 1  0,0000 0                CCS      A              ; remainder of list empty? 
02617    2617 0  1,2621 0                TC       *+2            ; >0, no 
02620    2620 0  1,2630 0                TC       EX_RM_done2    ; +0, yes, so exit 
                          
02621    2621 3  0,0264 1                XCH      EX_RM_jobPtr   ; bump job pointer back 1 record 
02622    2622 6  1,2046 1                AD       ONE            
02623    2623 5  0,0264 1                TS       EX_RM_jobPtr   
                          
02624    2624 6  1,2046 1                AD       ONE            ; set pointer to record behind it 
02625    2625 5  0,0265 0                TS       EX_RM_jobPtr2  
                          
02626    2626 1  0,0267 0                CCS      EX_RM_loopCnt  ; done bumping jobs upward? 
02627    2627 0  1,2611 0                TC       EX_RM_loop2    ; not yet 
                          
                          ; Since we removed a record, the last record on the list 
                          ; should be NIL. 
                          
                          EX_RM_done2    EQU      *              
02630    2630 3  0,0266 0                XCH      EX_RM_savePtr  
02631    2631 2  0,0264 0                INDEX    EX_RM_jobPtr   ; move the index for the top record 
02632    2632 5  0,0000 1                TS       0              ; to the bottom of the list 
                          
                          ; set all fields in NIL record to zero 
                          
02633    2633 3  1,2120 0                XCH      EX_jobRecSize  
02634    2634 5  0,0271 0                TS       EX_RM_field    
                          
                          EX_RM_loop3    EQU      *              
02635    2635 1  0,0271 1                CCS      EX_RM_field    ; done? 
02636    2636 0  1,2640 1                TC       *+2            ; not yet 
02637    2637 0  1,2652 1                TC       EX_RM_done3    ; yes 
02640    2640 5  0,0271 0                TS       EX_RM_field    
                          
                          ; set this field to zero 
                          
02641    2641 3  1,2045 1                CAF      ZERO           
02642    2642 2  0,0264 0                INDEX    EX_RM_jobPtr   
02643    2643 6  0,0000 1                AD       0              ; get index to record 
02644    2644 6  0,0271 0                AD       EX_RM_field    ; add field displacement 
02645    2645 5  0,0272 0                TS       EX_RM_findx    ; save index to field 
02646    2646 3  1,2045 1                CAF      ZERO           
02647    2647 2  0,0272 1                INDEX    EX_RM_findx    
02650    2650 5  0,0057 0                TS       EX_currentJob  ; clear field 
                          
02651    2651 0  1,2635 0                TC       EX_RM_loop3    
                          
                          EX_RM_done3    EQU      *              
02652    2652 0  0,0263 0                TC       EX_RM_saveQ    ; return 
                          
                          
                          ;-------------------------------------------------------------------------- 
                          ; DUMMY JOB - runs at the lowest priority and never terminates. Ensures 
                          ; that there is always at least one job executing. Sleeping jobs are 
                          ; given a lower priority than the dummy job. 
                          ;-------------------------------------------------------------------------- 
                          
                          
                          dumJob         EQU      *              
02653    2653 1  0,0236 1                CCS      newJob         ; check for context switch 
02654    2654 0  1,2205 1                TC       CHANG1         
02655    2655 0  1,2653 0                TC       dumJob         
                          
                          
                          
                          ;-------------------------------------------------------------------------- 
                          ; TEST DATA 
                          ;-------------------------------------------------------------------------- 
                          
                          
                          ; TEST JOBS 
                          COUNT1         EQU      %44            
                          COUNT2         EQU      %45            
                          COUNT3         EQU      %46            
                          
02656    2656     00003 1 prio1          DS       3              
02657    2657     00003 1 prio2          DS       3              
02660    2660     00004 0 prio3          DS       4              
                          
                          ; TEST CODE - JOB 3 
                          job3           EQU      *              
02661    2661 1  0,0236 1                CCS      newJob         ; yield to higher priority job 
02662    2662 0  1,2205 1                TC       CHANG1         
                          
02663    2663 3  1,2045 1                CAF      ZERO           
02664    2664 6  0,0046 0                AD       COUNT3         
02665    2665 6  1,2046 1                AD       ONE            
02666    2666 5  0,0046 0                TS       COUNT3         
                          
02667    2667 0  1,2175 0                TC       ENDOFJOB       ; terminate job 
                          
                          
                          
                                         ORG      BANK11         ; **** BANK 11 **** 
                          
                          ; TEST CODE - JOB 1 
                          job1           EQU      *              
22000 11,0000 3  1,2045 1                CAF      ZERO           
22001 11,0001 6  0,0044 1                AD       COUNT1         
22002 11,0002 6  1,2046 1                AD       ONE            
22003 11,0003 5  0,0044 1                TS       COUNT1         
22004 11,0004 3  0,0000 1                NOOP                    ; ignore skip 
                          
22005 11,0005 1  0,0236 1                CCS      newJob         ; yield to higher priority job 
22006 11,0006 0  1,2205 1                TC       CHANG1         
                          
22007 11,0007 0 11,6000 1                TC       job1           
                          
                                         ORG      BANK12         ; **** BANK 12 **** 
                          
                          ; TEST CODE - JOB 2 
                          job2           EQU      *              
24000 12,0000 3  1,2045 1                CAF      ZERO           
24001 12,0001 6  0,0045 0                AD       COUNT2         
24002 12,0002 6  1,2046 1                AD       ONE            
24003 12,0003 5  0,0045 0                TS       COUNT2         
24004 12,0004 3  0,0000 1                NOOP                    ; ignore skip 
                          
24005 12,0005 1  0,0236 1                CCS      newJob         ; yield to higher priority job 
24006 12,0006 0  1,2205 1                TC       CHANG1         
                          
24007 12,0007 0 12,6000 1                TC       job2           
                          
                          
                          

Assembly complete. Errors = 0

Symbol table:
BANK0          000057   MAXJOBS        000007   JRECSZ         000015   
EX_currentJob  000057   MPAC           000057   MODE           000066   
LOC            000067   BANKSET        000070   PUSHLOC        000071   
PRIORITY       000072   JOBPRIOBASE    000073   JREC0          000074   
JREC1          000111   JREC2          000126   JREC3          000143   
JREC4          000160   JREC5          000175   JREC6          000212   
EX_jobList     000227   LOCCTR         000227   CHGJOB         000001   
KEEPJOB        000000   newJob         000236   EX_JW_saveQ    000237   
EX_JW_loopCnt  000240   EX_JW_CADR     000241   EX_JW_foundit  000242   
EX_JW_jobPtr   000243   EX_JW_jobPtr2  000244   EX_JW_fndIndx  000245   
EX_AJ_saveQ    000246   EX_AJ_loopCnt  000247   EX_AJ_jobPrio  000250   
EX_AJ_jobPtr   000251   EX_IN_saveQ    000252   EX_IN_loopCnt  000253   
EX_IN_jobPtr   000254   EX_IN_recIndex 000255   EX_IN_field    000256   
EX_IN_findx    000257   EX_MN_runAddr  000260   EX_MN_field    000261   
EX_MN_findx    000262   EX_RM_saveQ    000263   EX_RM_jobPtr   000264   
EX_RM_jobPtr2  000265   EX_RM_savePtr  000266   EX_RM_loopCnt  000267   
EX_RM_retval   000270   EX_RM_field    000271   EX_RM_findx    000272   
EX_IS_newPrio  000273   EX_IS_newPrioB 000274   EX_IS_newLoc   000275   
EX_IS_saveQ    000276   EX_IS_jobPtr   000277   EX_IS_jobPtr2  000300   
EX_IS_loopCnt  000301   EXTENDER       005777   GOPROG         002000   
T3RUPT         002004   ERRUPT         002010   DSRUPT         002014   
KEYRUPT        002020   UPRUPT         002024   endRUPT        002030   
goT3           002034   goER           002035   goDS           002036   
goKEY          002037   goUP           002040   ofbit          002041   
NEG0           002042   NEG1           002043   NEG2           002044   
ZERO           002045   ONE            002046   TWO            002047   
THREE          002050   FOUR           002051   FIVE           002052   
SIX            002053   SEVEN          002054   TEN            002055   
BIT1           002056   BIT3           002057   BIT5           002060   
BIT7           002061   BIT11          002062   BIT12          002063   
BIT13          002064   BIT14          002065   BIT15          002066   
LOW7           002067   bankAddr       002070   lowAddr        002071   
OCT1400        002072   NOUTCON        002073   POSMAX         002074   
THE_CADR       002075   goMAIN         002076   EX_WAKE_PRIO   002114   
EX_DUMMY_PRIO  002115   EX_SLEEP_PRIO  002116   EX_jobCurStart 002117   
EX_jobRecSize  002120   EX_jobLstStart 002121   EX_jobLstEnd   002122   
EX_jobLstEnd1  002123   EX_numJobs     002124   EX_numJobs1    002125   
EX_changeJob   002126   EX_keepJob     002127   EX_exec        002130   
EX_MN_findJob  002134   EX_MN_setFlg   002151   EX_MN_runJob   002153   
EX_MN_runIt    002172   ENDOFJOB       002175   JOBSLEEP       002177   
CHANG1         002205   EX_MN_notBank  002222   EX_MN_saveIt   002224   
EX_MN_mvRec    002231   EX_MN_loop3    002235   EX_MN_done3    002254   
JOBWAKE        002255   EX_JW_loop     002267   EX_JW_moveRec  002307   
EX_JW_bumpPtr  002313   EX_JW_done     002330   EX_JW_return   002346   
EX_addJob      002347   EX_AJ_testFlg  002403   EX_AJ_done     002413   
EX_initEX      002420   EX_IN_loop1    002434   EX_IN_loop2    002452   
EX_IN_loop3    002455   EX_IN_done     002472   EX_findIns     002500   
EX_FI_loop     002515   EX_FI_bumpPtr  002544   EX_FI_insRec   002553   
EX_FI_done     002553   EX_remove      002556   EX_RM_loop1    002566   
EX_RM_done1    002605   EX_RM_loop2    002611   EX_RM_done2    002630   
EX_RM_loop3    002635   EX_RM_done3    002652   dumJob         002653   
COUNT1         000044   COUNT2         000045   COUNT3         000046   
prio1          002656   prio2          002657   prio3          002660   
job3           002661   BANK11         022000   job1           022000   
BANK12         024000   job2           024000   ARUPT          000026   
Q              000001   QRUPT          000027   OUT1           000011   
A              000000   BANK           000015   